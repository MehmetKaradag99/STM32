
DC_MOTOR_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ccc  08003ccc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003cd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          0000022c  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4cc  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e8  00000000  00000000  0002d51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd0  00000000  00000000  0002fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002146e  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de92  00000000  00000000  00051bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d35df  00000000  00000000  0005fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013301f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000035d0  00000000  00000000  00133070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c94 	.word	0x08003c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003c94 	.word	0x08003c94

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b974 	b.w	8000ad4 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468e      	mov	lr, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14d      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000812:	428a      	cmp	r2, r1
 8000814:	4694      	mov	ip, r2
 8000816:	d969      	bls.n	80008ec <__udivmoddi4+0xe8>
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b152      	cbz	r2, 8000834 <__udivmoddi4+0x30>
 800081e:	fa01 f302 	lsl.w	r3, r1, r2
 8000822:	f1c2 0120 	rsb	r1, r2, #32
 8000826:	fa20 f101 	lsr.w	r1, r0, r1
 800082a:	fa0c fc02 	lsl.w	ip, ip, r2
 800082e:	ea41 0e03 	orr.w	lr, r1, r3
 8000832:	4094      	lsls	r4, r2
 8000834:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000838:	0c21      	lsrs	r1, r4, #16
 800083a:	fbbe f6f8 	udiv	r6, lr, r8
 800083e:	fa1f f78c 	uxth.w	r7, ip
 8000842:	fb08 e316 	mls	r3, r8, r6, lr
 8000846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084a:	fb06 f107 	mul.w	r1, r6, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 811f 	bcs.w	8000a9c <__udivmoddi4+0x298>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 811c 	bls.w	8000a9c <__udivmoddi4+0x298>
 8000864:	3e02      	subs	r6, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 f707 	mul.w	r7, r0, r7
 800087c:	42a7      	cmp	r7, r4
 800087e:	d90a      	bls.n	8000896 <__udivmoddi4+0x92>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	f080 810a 	bcs.w	8000aa0 <__udivmoddi4+0x29c>
 800088c:	42a7      	cmp	r7, r4
 800088e:	f240 8107 	bls.w	8000aa0 <__udivmoddi4+0x29c>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089a:	1be4      	subs	r4, r4, r7
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa4>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xc2>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	f000 80ef 	beq.w	8000a96 <__udivmoddi4+0x292>
 80008b8:	2600      	movs	r6, #0
 80008ba:	e9c5 0100 	strd	r0, r1, [r5]
 80008be:	4630      	mov	r0, r6
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f683 	clz	r6, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d14a      	bne.n	8000964 <__udivmoddi4+0x160>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd4>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80f9 	bhi.w	8000aca <__udivmoddi4+0x2c6>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	469e      	mov	lr, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa4>
 80008e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa4>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xec>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 8092 	bne.w	8000a1e <__udivmoddi4+0x21a>
 80008fa:	eba1 010c 	sub.w	r1, r1, ip
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2601      	movs	r6, #1
 8000908:	0c20      	lsrs	r0, r4, #16
 800090a:	fbb1 f3f7 	udiv	r3, r1, r7
 800090e:	fb07 1113 	mls	r1, r7, r3, r1
 8000912:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000916:	fb0e f003 	mul.w	r0, lr, r3
 800091a:	4288      	cmp	r0, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x12c>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f103 38ff 	add.w	r8, r3, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x12a>
 8000928:	4288      	cmp	r0, r1
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2c0>
 800092e:	4643      	mov	r3, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1110 	mls	r1, r7, r0, r1
 800093c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x156>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x154>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2ca>
 8000958:	4608      	mov	r0, r1
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000962:	e79c      	b.n	800089e <__udivmoddi4+0x9a>
 8000964:	f1c6 0720 	rsb	r7, r6, #32
 8000968:	40b3      	lsls	r3, r6
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa20 f407 	lsr.w	r4, r0, r7
 8000976:	fa01 f306 	lsl.w	r3, r1, r6
 800097a:	431c      	orrs	r4, r3
 800097c:	40f9      	lsrs	r1, r7
 800097e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000982:	fa00 f306 	lsl.w	r3, r0, r6
 8000986:	fbb1 f8f9 	udiv	r8, r1, r9
 800098a:	0c20      	lsrs	r0, r4, #16
 800098c:	fa1f fe8c 	uxth.w	lr, ip
 8000990:	fb09 1118 	mls	r1, r9, r8, r1
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	fb08 f00e 	mul.w	r0, r8, lr
 800099c:	4288      	cmp	r0, r1
 800099e:	fa02 f206 	lsl.w	r2, r2, r6
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b8>
 80009a4:	eb1c 0101 	adds.w	r1, ip, r1
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4461      	add	r1, ip
 80009bc:	1a09      	subs	r1, r1, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c4:	fb09 1110 	mls	r1, r9, r0, r1
 80009c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	458e      	cmp	lr, r1
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1e2>
 80009d4:	eb1c 0101 	adds.w	r1, ip, r1
 80009d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2b4>
 80009de:	458e      	cmp	lr, r1
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2b4>
 80009e2:	3802      	subs	r0, #2
 80009e4:	4461      	add	r1, ip
 80009e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ea:	fba0 9402 	umull	r9, r4, r0, r2
 80009ee:	eba1 010e 	sub.w	r1, r1, lr
 80009f2:	42a1      	cmp	r1, r4
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46a6      	mov	lr, r4
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x2a4>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x2a0>
 80009fc:	b15d      	cbz	r5, 8000a16 <__udivmoddi4+0x212>
 80009fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000a02:	eb61 010e 	sbc.w	r1, r1, lr
 8000a06:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a0e:	40f1      	lsrs	r1, r6
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e9c5 7100 	strd	r7, r1, [r5]
 8000a16:	2600      	movs	r6, #0
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	f1c2 0320 	rsb	r3, r2, #32
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a28:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a46:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x260>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b8>
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b8>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4463      	add	r3, ip
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	b289      	uxth	r1, r1
 8000a68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a74:	fb06 f30e 	mul.w	r3, r6, lr
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x28a>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a8a:	3e02      	subs	r6, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	1ac9      	subs	r1, r1, r3
 8000a90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0x104>
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e705      	b.n	80008a8 <__udivmoddi4+0xa4>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e3      	b.n	8000868 <__udivmoddi4+0x64>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6f8      	b.n	8000896 <__udivmoddi4+0x92>
 8000aa4:	454b      	cmp	r3, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f8>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f8>
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x28a>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1e2>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x260>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b8>
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	4461      	add	r1, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x12c>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e709      	b.n	80008e2 <__udivmoddi4+0xde>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x156>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 fca3 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f941 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f000 facf 	bl	8001088 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000aea:	f000 f9a7 	bl	8000e3c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000aee:	f000 fa49 	bl	8000f84 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000af2:	f000 f9f5 	bl	8000ee0 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000af6:	f000 fa9d 	bl	8001034 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000afa:	2100      	movs	r1, #0
 8000afc:	4889      	ldr	r0, [pc, #548]	; (8000d24 <main+0x24c>)
 8000afe:	f002 f85f 	bl	8002bc0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000b02:	4889      	ldr	r0, [pc, #548]	; (8000d28 <main+0x250>)
 8000b04:	f000 fd6a 	bl	80015dc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000b08:	4888      	ldr	r0, [pc, #544]	; (8000d2c <main+0x254>)
 8000b0a:	f000 fd67 	bl	80015dc <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_ADC_PollForConversion(&hadc2,HAL_MAX_DELAY) == HAL_OK)
 8000b0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000b12:	4886      	ldr	r0, [pc, #536]	; (8000d2c <main+0x254>)
 8000b14:	f000 fe34 	bl	8001780 <HAL_ADC_PollForConversion>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d106      	bne.n	8000b2c <main+0x54>
		  PWM = HAL_ADC_GetValue(&hadc2);
 8000b1e:	4883      	ldr	r0, [pc, #524]	; (8000d2c <main+0x254>)
 8000b20:	f000 feb9 	bl	8001896 <HAL_ADC_GetValue>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b81      	ldr	r3, [pc, #516]	; (8000d30 <main+0x258>)
 8000b2a:	801a      	strh	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PWM);
 8000b2c:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <main+0x258>)
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	4b7c      	ldr	r3, [pc, #496]	; (8000d24 <main+0x24c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(10);
 8000b36:	200a      	movs	r0, #10
 8000b38:	f000 fce8 	bl	800150c <HAL_Delay>
	  __HAL_TIM_DISABLE(&htim2);
 8000b3c:	4b79      	ldr	r3, [pc, #484]	; (8000d24 <main+0x24c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a1a      	ldr	r2, [r3, #32]
 8000b42:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10f      	bne.n	8000b6c <main+0x94>
 8000b4c:	4b75      	ldr	r3, [pc, #468]	; (8000d24 <main+0x24c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a1a      	ldr	r2, [r3, #32]
 8000b52:	f240 4344 	movw	r3, #1092	; 0x444
 8000b56:	4013      	ands	r3, r2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <main+0x94>
 8000b5c:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <main+0x24c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b70      	ldr	r3, [pc, #448]	; (8000d24 <main+0x24c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f000 fccd 	bl	800150c <HAL_Delay>


	  while(Size--)
 8000b72:	e016      	b.n	8000ba2 <main+0xca>
	  {
	  if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY) == HAL_OK)
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	486b      	ldr	r0, [pc, #428]	; (8000d28 <main+0x250>)
 8000b7a:	f000 fe01 	bl	8001780 <HAL_ADC_PollForConversion>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <main+0xba>
           ADCValueForOutput = HAL_ADC_GetValue(&hadc1);
 8000b84:	4868      	ldr	r0, [pc, #416]	; (8000d28 <main+0x250>)
 8000b86:	f000 fe86 	bl	8001896 <HAL_ADC_GetValue>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <main+0x25c>)
 8000b90:	801a      	strh	r2, [r3, #0]
	  ADC_Buffer[Size - 100] = ADCValueForOutput;
 8000b92:	4b69      	ldr	r3, [pc, #420]	; (8000d38 <main+0x260>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	3b64      	subs	r3, #100	; 0x64
 8000b98:	4a66      	ldr	r2, [pc, #408]	; (8000d34 <main+0x25c>)
 8000b9a:	8811      	ldrh	r1, [r2, #0]
 8000b9c:	4a67      	ldr	r2, [pc, #412]	; (8000d3c <main+0x264>)
 8000b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  while(Size--)
 8000ba2:	4b65      	ldr	r3, [pc, #404]	; (8000d38 <main+0x260>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	1e5a      	subs	r2, r3, #1
 8000ba8:	b2d1      	uxtb	r1, r2
 8000baa:	4a63      	ldr	r2, [pc, #396]	; (8000d38 <main+0x260>)
 8000bac:	7011      	strb	r1, [r2, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1e0      	bne.n	8000b74 <main+0x9c>
	  }

	  Size = 100;
 8000bb2:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <main+0x260>)
 8000bb4:	2264      	movs	r2, #100	; 0x64
 8000bb6:	701a      	strb	r2, [r3, #0]

	  for(uint8_t i = 0 ; i<100 ; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	e00c      	b.n	8000bd8 <main+0x100>
	  {
		  sum = sum + ADC_Buffer[i];
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <main+0x264>)
 8000bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <main+0x268>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a5c      	ldr	r2, [pc, #368]	; (8000d40 <main+0x268>)
 8000bd0:	6013      	str	r3, [r2, #0]
	  for(uint8_t i = 0 ; i<100 ; i++)
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b63      	cmp	r3, #99	; 0x63
 8000bdc:	d9ef      	bls.n	8000bbe <main+0xe6>
	  }
	  sum = 0;
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <main+0x268>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]

	  ADCValueForOutput = sum/100;
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <main+0x268>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a56      	ldr	r2, [pc, #344]	; (8000d44 <main+0x26c>)
 8000bea:	fba2 2303 	umull	r2, r3, r2, r3
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <main+0x25c>)
 8000bf4:	801a      	strh	r2, [r3, #0]

	  __HAL_TIM_ENABLE(&htim2);
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <main+0x24c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <main+0x24c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0201 	orr.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]

	  error = ADCValueForOutput - PWM;
 8000c06:	4b4b      	ldr	r3, [pc, #300]	; (8000d34 <main+0x25c>)
 8000c08:	881a      	ldrh	r2, [r3, #0]
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <main+0x258>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <main+0x270>)
 8000c14:	801a      	strh	r2, [r3, #0]
	  pid_p = kp * error;
 8000c16:	4b4c      	ldr	r3, [pc, #304]	; (8000d48 <main+0x270>)
 8000c18:	881b      	ldrh	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fd50 	bl	80006c0 <__aeabi_i2d>
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <main+0x274>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff facf 	bl	80001c8 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4948      	ldr	r1, [pc, #288]	; (8000d50 <main+0x278>)
 8000c30:	e9c1 2300 	strd	r2, r3, [r1]

	  if(MinThreshold<error && error<MaxThreshold)
 8000c34:	f06f 0309 	mvn.w	r3, #9
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <main+0x270>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	da1d      	bge.n	8000c7e <main+0x1a6>
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <main+0x270>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	230a      	movs	r3, #10
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	da17      	bge.n	8000c7e <main+0x1a6>
		  pid_i += ki*error ;
 8000c4e:	4b3e      	ldr	r3, [pc, #248]	; (8000d48 <main+0x270>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd34 	bl	80006c0 <__aeabi_i2d>
 8000c58:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <main+0x27c>)
 8000c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5e:	f7ff fab3 	bl	80001c8 <__aeabi_dmul>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	4610      	mov	r0, r2
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <main+0x280>)
 8000c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c70:	f7ff fbda 	bl	8000428 <__adddf3>
 8000c74:	4602      	mov	r2, r0
 8000c76:	460b      	mov	r3, r1
 8000c78:	4937      	ldr	r1, [pc, #220]	; (8000d58 <main+0x280>)
 8000c7a:	e9c1 2300 	strd	r2, r3, [r1]

	  PID = pid_p + pid_i ;
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <main+0x278>)
 8000c80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <main+0x280>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f7ff fbcd 	bl	8000428 <__adddf3>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4932      	ldr	r1, [pc, #200]	; (8000d5c <main+0x284>)
 8000c94:	e9c1 2300 	strd	r2, r3, [r1]

	  PWM = PWM  - PID;
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <main+0x258>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd0f 	bl	80006c0 <__aeabi_i2d>
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <main+0x284>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	f7ff fbbc 	bl	8000424 <__aeabi_dsub>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff fd6e 	bl	8000794 <__aeabi_d2uiz>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <main+0x258>)
 8000cbe:	801a      	strh	r2, [r3, #0]

	  if(PWM < 0)
		  PWM = 0;
	  if(PWM > MAX_PWM)
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <main+0x258>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d903      	bls.n	8000cd4 <main+0x1fc>
		  PWM = MAX_PWM;
 8000ccc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <main+0x258>)
 8000cd2:	801a      	strh	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,PWM);
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <main+0x258>)
 8000cd6:	881a      	ldrh	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <main+0x24c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34

	  Buffer[0]  =  (uint8_t)((PWM) & (0x00FF));
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <main+0x258>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <main+0x288>)
 8000ce6:	701a      	strb	r2, [r3, #0]
	  Buffer[1]  =  (uint8_t)((PWM>>8) & (0x00FF));
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <main+0x258>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <main+0x288>)
 8000cf4:	705a      	strb	r2, [r3, #1]
	  Buffer[2]  =  (uint8_t)((ADCValueForOutput) & (0x00FF));
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <main+0x25c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <main+0x288>)
 8000cfe:	709a      	strb	r2, [r3, #2]
	  Buffer[3]  =  (uint8_t)((ADCValueForOutput>>8) & (0x00FF));
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <main+0x25c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <main+0x288>)
 8000d0c:	70da      	strb	r2, [r3, #3]

	  HAL_UART_Transmit(&huart1, Buffer, 4, HAL_MAX_DELAY);
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2204      	movs	r2, #4
 8000d14:	4912      	ldr	r1, [pc, #72]	; (8000d60 <main+0x288>)
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <main+0x28c>)
 8000d18:	f002 fc1b 	bl	8003552 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000d1c:	2064      	movs	r0, #100	; 0x64
 8000d1e:	f000 fbf5 	bl	800150c <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc2,HAL_MAX_DELAY) == HAL_OK)
 8000d22:	e6f4      	b.n	8000b0e <main+0x36>
 8000d24:	200000cc 	.word	0x200000cc
 8000d28:	2000003c 	.word	0x2000003c
 8000d2c:	20000084 	.word	0x20000084
 8000d30:	2000015a 	.word	0x2000015a
 8000d34:	20000158 	.word	0x20000158
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	2000017c 	.word	0x2000017c
 8000d40:	20000244 	.word	0x20000244
 8000d44:	51eb851f 	.word	0x51eb851f
 8000d48:	2000015c 	.word	0x2000015c
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000160 	.word	0x20000160
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000168 	.word	0x20000168
 8000d5c:	20000170 	.word	0x20000170
 8000d60:	20000178 	.word	0x20000178
 8000d64:	20000114 	.word	0x20000114

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	; 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	; 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 ff84 	bl	8003c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <SystemClock_Config+0xcc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a21      	ldr	r2, [pc, #132]	; (8000e38 <SystemClock_Config+0xd0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <SystemClock_Config+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ddc:	23a8      	movs	r3, #168	; 0xa8
 8000dde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de4:	2304      	movs	r3, #4
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f9ff 	bl	80021f0 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df8:	f000 f96e 	bl	80010d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2105      	movs	r1, #5
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fc60 	bl	80026e0 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e26:	f000 f957 	bl	80010d8 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3750      	adds	r7, #80	; 0x50
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e50:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_ADC1_Init+0x9c>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_ADC1_Init+0xa0>)
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000e9e:	f000 fb59 	bl	8001554 <HAL_ADC_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea8:	f000 f916 	bl	80010d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_ADC1_Init+0x98>)
 8000ebe:	f000 fcf7 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec8:	f000 f906 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2000003c 	.word	0x2000003c
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	0f000001 	.word	0x0f000001

08000ee0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_ADC2_Init+0x9c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_ADC2_Init+0xa0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f42:	f000 fb07 	bl	8001554 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f8c4 	bl	80010d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC2_Init+0x98>)
 8000f62:	f000 fca5 	bl	80018b0 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 f8b4 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000084 	.word	0x20000084
 8000f7c:	40012100 	.word	0x40012100
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	f107 0320 	add.w	r3, r7, #32
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fa8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fb0:	2228      	movs	r2, #40	; 0x28
 8000fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fbc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fd0:	f001 fda6 	bl	8002b20 <HAL_TIM_PWM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fda:	f000 f87d 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	4619      	mov	r1, r3
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <MX_TIM2_Init+0xac>)
 8000fee:	f002 f9e7 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ff8:	f000 f86e 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffc:	2360      	movs	r3, #96	; 0x60
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_TIM2_Init+0xac>)
 8001014:	f001 fe9c 	bl	8002d50 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800101e:	f000 f85b 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001022:	4803      	ldr	r0, [pc, #12]	; (8001030 <MX_TIM2_Init+0xac>)
 8001024:	f000 f91a 	bl	800125c <HAL_TIM_MspPostInit>

}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	; 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000cc 	.word	0x200000cc

08001034 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_USART1_UART_Init+0x50>)
 800103c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001040:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001044:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800105a:	2208      	movs	r2, #8
 800105c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 8001066:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800106a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_USART1_UART_Init+0x4c>)
 800106e:	f002 fa23 	bl	80034b8 <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001078:	f000 f82e 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000114 	.word	0x20000114
 8001084:	40011000 	.word	0x40011000

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_GPIO_Init+0x4c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <MX_GPIO_Init+0x4c>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x4c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_GPIO_Init+0x4c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <MX_GPIO_Init+0x4c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_GPIO_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2e      	ldr	r2, [pc, #184]	; (800120c <HAL_ADC_MspInit+0xd8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d128      	bne.n	80011a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a25      	ldr	r2, [pc, #148]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	481c      	ldr	r0, [pc, #112]	; (8001214 <HAL_ADC_MspInit+0xe0>)
 80011a2:	f000 fe89 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011a6:	e02c      	b.n	8001202 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_ADC_MspInit+0xe4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d127      	bne.n	8001202 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <HAL_ADC_MspInit+0xdc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_ADC_MspInit+0xe0>)
 80011fe:	f000 fe5b 	bl	8001eb8 <HAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012000 	.word	0x40012000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000
 8001218:	40012100 	.word	0x40012100

0800121c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d10d      	bne.n	800124a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_PWM_MspInit+0x3c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_TIM_PWM_MspInit+0x3c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_TIM_PWM_MspInit+0x3c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800127c:	d11d      	bne.n	80012ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_TIM_MspPostInit+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_TIM_MspPostInit+0x68>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_TIM_MspPostInit+0x68>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800129a:	2320      	movs	r3, #32
 800129c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012aa:	2301      	movs	r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <HAL_TIM_MspPostInit+0x6c>)
 80012b6:	f000 fdff 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	; 0x28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a19      	ldr	r2, [pc, #100]	; (8001350 <HAL_UART_MspInit+0x84>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d12c      	bne.n	8001348 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_UART_MspInit+0x88>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_UART_MspInit+0x88>)
 80012f8:	f043 0310 	orr.w	r3, r3, #16
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_UART_MspInit+0x88>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f003 0310 	and.w	r3, r3, #16
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_UART_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_UART_MspInit+0x88>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_UART_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001326:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_UART_MspInit+0x8c>)
 8001344:	f000 fdb8 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40011000 	.word	0x40011000
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f890 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800140c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013da:	490e      	ldr	r1, [pc, #56]	; (8001414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e0:	e002      	b.n	80013e8 <LoopCopyDataInit>

080013e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e6:	3304      	adds	r3, #4

080013e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ec:	d3f9      	bcc.n	80013e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f0:	4c0b      	ldr	r4, [pc, #44]	; (8001420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f4:	e001      	b.n	80013fa <LoopFillZerobss>

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f8:	3204      	adds	r2, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fe:	f7ff ffd7 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001402:	f002 fc1b 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001406:	f7ff fb67 	bl	8000ad8 <main>
  bx  lr    
 800140a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800140c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001414:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001418:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 800141c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001420:	2000024c 	.word	0x2000024c

08001424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001424:	e7fe      	b.n	8001424 <ADC_IRQHandler>
	...

08001428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800142c:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <HAL_Init+0x40>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_Init+0x40>)
 800143e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001442:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_Init+0x40>)
 800144a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 fcfd 	bl	8001e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fe42 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fd07 	bl	8001e9e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 fcdd 	bl	8001e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	; (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000014 	.word	0x20000014
 80014c4:	2000001c 	.word	0x2000001c
 80014c8:	20000018 	.word	0x20000018

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	20000248 	.word	0x20000248

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000248 	.word	0x20000248

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff ffee 	bl	80014f4 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001524:	d005      	beq.n	8001532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_Delay+0x44>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001532:	bf00      	nop
 8001534:	f7ff ffde 	bl	80014f4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d8f7      	bhi.n	8001534 <HAL_Delay+0x28>
  {
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000001c 	.word	0x2000001c

08001554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e033      	b.n	80015d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fdde 	bl	8001134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800159a:	f023 0302 	bic.w	r3, r3, #2
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 faa4 	bl	8001af4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0201 	orr.w	r2, r3, #1
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
 80015c2:	e001      	b.n	80015c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Start+0x1a>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e0b2      	b.n	800175c <HAL_ADC_Start+0x180>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d018      	beq.n	800163e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b52      	ldr	r3, [pc, #328]	; (8001768 <HAL_ADC_Start+0x18c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_ADC_Start+0x190>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d17a      	bne.n	8001742 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001676:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168a:	d106      	bne.n	800169a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f023 0206 	bic.w	r2, r3, #6
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	645a      	str	r2, [r3, #68]	; 0x44
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a8:	4b31      	ldr	r3, [pc, #196]	; (8001770 <HAL_ADC_Start+0x194>)
 80016aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12a      	bne.n	8001718 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <HAL_ADC_Start+0x198>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d015      	beq.n	80016f8 <HAL_ADC_Start+0x11c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_ADC_Start+0x19c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d105      	bne.n	80016e2 <HAL_ADC_Start+0x106>
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_ADC_Start+0x194>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a25      	ldr	r2, [pc, #148]	; (800177c <HAL_ADC_Start+0x1a0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d136      	bne.n	800175a <HAL_ADC_Start+0x17e>
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <HAL_ADC_Start+0x194>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d130      	bne.n	800175a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d129      	bne.n	800175a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	e020      	b.n	800175a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a15      	ldr	r2, [pc, #84]	; (8001774 <HAL_ADC_Start+0x198>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d11b      	bne.n	800175a <HAL_ADC_Start+0x17e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d114      	bne.n	800175a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00b      	b.n	800175a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f043 0210 	orr.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f043 0201 	orr.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	20000014 	.word	0x20000014
 800176c:	431bde83 	.word	0x431bde83
 8001770:	40012300 	.word	0x40012300
 8001774:	40012000 	.word	0x40012000
 8001778:	40012100 	.word	0x40012100
 800177c:	40012200 	.word	0x40012200

08001780 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179c:	d113      	bne.n	80017c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ac:	d10b      	bne.n	80017c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f043 0220 	orr.w	r2, r3, #32
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e063      	b.n	800188e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017c6:	f7ff fe95 	bl	80014f4 <HAL_GetTick>
 80017ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017cc:	e021      	b.n	8001812 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d01d      	beq.n	8001812 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_ADC_PollForConversion+0x6c>
 80017dc:	f7ff fe8a 	bl	80014f4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d212      	bcs.n	8001812 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d00b      	beq.n	8001812 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0204 	orr.w	r2, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e03d      	b.n	800188e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b02      	cmp	r3, #2
 800181e:	d1d6      	bne.n	80017ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0212 	mvn.w	r2, #18
 8001828:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d123      	bne.n	800188c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11f      	bne.n	800188c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d006      	beq.n	8001868 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1c>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e105      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x228>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b09      	cmp	r3, #9
 80018da:	d925      	bls.n	8001928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68d9      	ldr	r1, [r3, #12]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3b1e      	subs	r3, #30
 80018f2:	2207      	movs	r2, #7
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43da      	mvns	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	400a      	ands	r2, r1
 8001900:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	3b1e      	subs	r3, #30
 800191c:	409a      	lsls	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	e022      	b.n	800196e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6919      	ldr	r1, [r3, #16]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	2207      	movs	r2, #7
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43da      	mvns	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6919      	ldr	r1, [r3, #16]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	4603      	mov	r3, r0
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b06      	cmp	r3, #6
 8001974:	d824      	bhi.n	80019c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b05      	subs	r3, #5
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e04c      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d824      	bhi.n	8001a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	3b23      	subs	r3, #35	; 0x23
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43da      	mvns	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	3b23      	subs	r3, #35	; 0x23
 8001a04:	fa00 f203 	lsl.w	r2, r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a10:	e023      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b41      	subs	r3, #65	; 0x41
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b41      	subs	r3, #65	; 0x41
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_ADC_ConfigChannel+0x234>)
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b12      	cmp	r3, #18
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_ADC_ConfigChannel+0x238>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d123      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d003      	beq.n	8001a96 <HAL_ADC_ConfigChannel+0x1e6>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d11b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_ADC_ConfigChannel+0x23c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_ADC_ConfigChannel+0x240>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0c9a      	lsrs	r2, r3, #18
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	20000014 	.word	0x20000014
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <ADC_Init+0x1f0>)
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021a      	lsls	r2, r3, #8
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <ADC_Init+0x1f4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d022      	beq.n	8001bd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6899      	ldr	r1, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6899      	ldr	r1, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e00f      	b.n	8001bf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0202 	bic.w	r2, r2, #2
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7e1b      	ldrb	r3, [r3, #24]
 8001c0c:	005a      	lsls	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	035a      	lsls	r2, r3, #13
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	e007      	b.n	8001c68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	051a      	lsls	r2, r3, #20
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001caa:	025a      	lsls	r2, r3, #9
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	029a      	lsls	r2, r3, #10
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	609a      	str	r2, [r3, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40012300 	.word	0x40012300
 8001ce8:	0f000001 	.word	0x0f000001

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	6039      	str	r1, [r7, #0]
 8001d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db0a      	blt.n	8001d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	490c      	ldr	r1, [pc, #48]	; (8001d9c <__NVIC_SetPriority+0x4c>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	440b      	add	r3, r1
 8001d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d78:	e00a      	b.n	8001d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4908      	ldr	r1, [pc, #32]	; (8001da0 <__NVIC_SetPriority+0x50>)
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	3b04      	subs	r3, #4
 8001d88:	0112      	lsls	r2, r2, #4
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	761a      	strb	r2, [r3, #24]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e100 	.word	0xe000e100
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f1c3 0307 	rsb	r3, r3, #7
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	bf28      	it	cs
 8001dc2:	2304      	movcs	r3, #4
 8001dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d902      	bls.n	8001dd4 <NVIC_EncodePriority+0x30>
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3b03      	subs	r3, #3
 8001dd2:	e000      	b.n	8001dd6 <NVIC_EncodePriority+0x32>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	401a      	ands	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	4313      	orrs	r3, r2
         );
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e1c:	d301      	bcc.n	8001e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00f      	b.n	8001e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <SysTick_Config+0x40>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f7ff ff8e 	bl	8001d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SysTick_Config+0x40>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <SysTick_Config+0x40>)
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000e010 	.word	0xe000e010

08001e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff47 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff5c 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff8e 	bl	8001da4 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5d 	bl	8001d50 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffb0 	bl	8001e0c <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e16b      	b.n	80021ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 815a 	bne.w	80021a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80b4 	beq.w	80021a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_GPIO_Init+0x310>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_GPIO_Init+0x314>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02b      	beq.n	80020de <HAL_GPIO_Init+0x226>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <HAL_GPIO_Init+0x318>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x222>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_GPIO_Init+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x21e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_GPIO_Init+0x320>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x324>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x328>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x32c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x330>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x20a>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00e      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x310>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_GPIO_Init+0x334>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_GPIO_Init+0x334>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_GPIO_Init+0x334>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_GPIO_Init+0x334>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f ae90 	bls.w	8001ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40021c00 	.word	0x40021c00
 80021ec:	40013c00 	.word	0x40013c00

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e267      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e242      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff f924 	bl	80014f4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff f920 	bl	80014f4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e207      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff f910 	bl	80014f4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff f90c 	bl	80014f4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c7      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff f8c5 	bl	80014f4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff f8c1 	bl	80014f4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a8      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f8a4 	bl	80014f4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff f8a0 	bl	80014f4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e187      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff f884 	bl	80014f4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff f880 	bl	80014f4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e167      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff f86d 	bl	80014f4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff f869 	bl	80014f4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e150      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b7d      	ldr	r3, [pc, #500]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a7c      	ldr	r2, [pc, #496]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a73      	ldr	r2, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7ff f829 	bl	80014f4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff f825 	bl	80014f4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e10c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x2ea>
 80024cc:	4b64      	ldr	r3, [pc, #400]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe ffea 	bl	80014f4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe ffe6 	bl	80014f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0cb      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x334>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7fe ffd4 	bl	80014f4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe ffd0 	bl	80014f4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a38      	ldr	r2, [pc, #224]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a1 	beq.w	80026d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d05c      	beq.n	8002654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe ffa4 	bl	80014f4 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe ffa0 	bl	80014f4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e087      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe ff79 	bl	80014f4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe ff75 	bl	80014f4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e05c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x416>
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7fe ff62 	bl	80014f4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe ff5e 	bl	80014f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e045      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e038      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x4ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d121      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fe90 	bl	80014f4 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fe8c 	bl	80014f4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fdf0 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	08003cac 	.word	0x08003cac
 80028a4:	20000014 	.word	0x20000014
 80028a8:	20000018 	.word	0x20000018

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	; 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	; 0x44
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
 800290c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	024b      	lsls	r3, r1, #9
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a8:	4621      	mov	r1, r4
 80029aa:	024a      	lsls	r2, r1, #9
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029bc:	f7fd ff0a 	bl	80007d4 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd feb0 	bl	80007d4 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000014 	.word	0x20000014

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08003cbc 	.word	0x08003cbc

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffdc 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0b5b      	lsrs	r3, r3, #13
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08003cbc 	.word	0x08003cbc

08002b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fb68 	bl	800121c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f000 f9b8 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x24>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e022      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d109      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x3e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e015      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x58>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e008      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e07c      	b.n	8002d2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	e013      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0x92>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	e00b      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xa2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	e003      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fb7e 	bl	8003374 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <HAL_TIM_PWM_Start+0x174>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_TIM_PWM_Start+0xcc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <HAL_TIM_PWM_Start+0x178>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIM_PWM_Start+0xd0>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <HAL_TIM_PWM_Start+0xd2>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <HAL_TIM_PWM_Start+0x174>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_TIM_PWM_Start+0x17c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_TIM_PWM_Start+0x180>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_TIM_PWM_Start+0x184>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a16      	ldr	r2, [pc, #88]	; (8002d38 <HAL_TIM_PWM_Start+0x178>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_PWM_Start+0x188>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x136>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <HAL_TIM_PWM_Start+0x18c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d111      	bne.n	8002d1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b06      	cmp	r3, #6
 8002d06:	d010      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d18:	e007      	b.n	8002d2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40001800 	.word	0x40001800

08002d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0ae      	b.n	8002ecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	f200 809f 	bhi.w	8002ebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002ebd 	.word	0x08002ebd
 8002d8c:	08002ebd 	.word	0x08002ebd
 8002d90:	08002ebd 	.word	0x08002ebd
 8002d94:	08002df9 	.word	0x08002df9
 8002d98:	08002ebd 	.word	0x08002ebd
 8002d9c:	08002ebd 	.word	0x08002ebd
 8002da0:	08002ebd 	.word	0x08002ebd
 8002da4:	08002e3b 	.word	0x08002e3b
 8002da8:	08002ebd 	.word	0x08002ebd
 8002dac:	08002ebd 	.word	0x08002ebd
 8002db0:	08002ebd 	.word	0x08002ebd
 8002db4:	08002e7b 	.word	0x08002e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f928 	bl	8003014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0208 	orr.w	r2, r2, #8
 8002dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0204 	bic.w	r2, r2, #4
 8002de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6999      	ldr	r1, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	619a      	str	r2, [r3, #24]
      break;
 8002df6:	e064      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f978 	bl	80030f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699a      	ldr	r2, [r3, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6999      	ldr	r1, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	021a      	lsls	r2, r3, #8
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]
      break;
 8002e38:	e043      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68b9      	ldr	r1, [r7, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f9cd 	bl	80031e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69da      	ldr	r2, [r3, #28]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0208 	orr.w	r2, r2, #8
 8002e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69da      	ldr	r2, [r3, #28]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69d9      	ldr	r1, [r3, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	61da      	str	r2, [r3, #28]
      break;
 8002e78:	e023      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 fa21 	bl	80032c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69da      	ldr	r2, [r3, #28]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	69da      	ldr	r2, [r3, #28]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69d9      	ldr	r1, [r3, #28]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	61da      	str	r2, [r3, #28]
      break;
 8002eba:	e002      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00f      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d003      	beq.n	8002f14 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d108      	bne.n	8002f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2f      	ldr	r2, [pc, #188]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d027      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d023      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <TIM_Base_SetConfig+0x120>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a29      	ldr	r2, [pc, #164]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d017      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <TIM_Base_SetConfig+0x128>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a27      	ldr	r2, [pc, #156]	; (8003000 <TIM_Base_SetConfig+0x12c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00f      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a26      	ldr	r2, [pc, #152]	; (8003004 <TIM_Base_SetConfig+0x130>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00b      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a25      	ldr	r2, [pc, #148]	; (8003008 <TIM_Base_SetConfig+0x134>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a24      	ldr	r2, [pc, #144]	; (800300c <TIM_Base_SetConfig+0x138>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d003      	beq.n	8002f86 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a23      	ldr	r2, [pc, #140]	; (8003010 <TIM_Base_SetConfig+0x13c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d108      	bne.n	8002f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0xf8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <TIM_Base_SetConfig+0x124>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400
 8003004:	40014800 	.word	0x40014800
 8003008:	40001800 	.word	0x40001800
 800300c:	40001c00 	.word	0x40001c00
 8003010:	40002000 	.word	0x40002000

08003014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f023 0302 	bic.w	r3, r3, #2
 800305c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a20      	ldr	r2, [pc, #128]	; (80030ec <TIM_OC1_SetConfig+0xd8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_OC1_SetConfig+0x64>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <TIM_OC1_SetConfig+0xdc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10c      	bne.n	8003092 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f023 0308 	bic.w	r3, r3, #8
 800307e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <TIM_OC1_SetConfig+0xd8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d003      	beq.n	80030a2 <TIM_OC1_SetConfig+0x8e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <TIM_OC1_SetConfig+0xdc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	621a      	str	r2, [r3, #32]
}
 80030e0:	bf00      	nop
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40010400 	.word	0x40010400

080030f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f023 0210 	bic.w	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f023 0320 	bic.w	r3, r3, #32
 800313e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <TIM_OC2_SetConfig+0xe4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_OC2_SetConfig+0x68>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a21      	ldr	r2, [pc, #132]	; (80031dc <TIM_OC2_SetConfig+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10d      	bne.n	8003178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <TIM_OC2_SetConfig+0xe4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC2_SetConfig+0x94>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <TIM_OC2_SetConfig+0xe8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d113      	bne.n	80031b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800318e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010400 	.word	0x40010400

080031e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <TIM_OC3_SetConfig+0xe0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC3_SetConfig+0x66>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a20      	ldr	r2, [pc, #128]	; (80032c4 <TIM_OC3_SetConfig+0xe4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10d      	bne.n	8003262 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800324c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <TIM_OC3_SetConfig+0xe0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_OC3_SetConfig+0x92>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <TIM_OC3_SetConfig+0xe4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d113      	bne.n	800329a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40010400 	.word	0x40010400

080032c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	031b      	lsls	r3, r3, #12
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <TIM_OC4_SetConfig+0xa4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_OC4_SetConfig+0x68>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <TIM_OC4_SetConfig+0xa8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d109      	bne.n	8003344 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003336:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	621a      	str	r2, [r3, #32]
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40010400 	.word	0x40010400

08003374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2201      	movs	r2, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e05a      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a21      	ldr	r2, [pc, #132]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003424:	d01d      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40001800 	.word	0x40001800

080034b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e03f      	b.n	800354a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fef4 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f929 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b08a      	sub	sp, #40	; 0x28
 8003556:	af02      	add	r7, sp, #8
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	d17c      	bne.n	800366c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit+0x2c>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e075      	b.n	800366e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x3e>
 800358c:	2302      	movs	r3, #2
 800358e:	e06e      	b.n	800366e <HAL_UART_Transmit+0x11c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	; 0x21
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a6:	f7fd ffa5 	bl	80014f4 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c0:	d108      	bne.n	80035d4 <HAL_UART_Transmit+0x82>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e003      	b.n	80035dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035e4:	e02a      	b.n	800363c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f840 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e036      	b.n	800366e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3302      	adds	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e007      	b.n	800362e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1cf      	bne.n	80035e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f810 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e006      	b.n	800366e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b090      	sub	sp, #64	; 0x40
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	e050      	b.n	800372a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d04c      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003696:	f7fd ff2d 	bl	80014f4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d241      	bcs.n	800372a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c6:	637a      	str	r2, [r7, #52]	; 0x34
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e5      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036fa:	623a      	str	r2, [r7, #32]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	61bb      	str	r3, [r7, #24]
   return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e00f      	b.n	800374a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d09f      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3740      	adds	r7, #64	; 0x40
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b0c0      	sub	sp, #256	; 0x100
 800375a:	af00      	add	r7, sp, #0
 800375c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	431a      	orrs	r2, r3
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037ac:	f021 010c 	bic.w	r1, r1, #12
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ba:	430b      	orrs	r3, r1
 80037bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	ea40 0301 	orr.w	r3, r0, r1
 80037da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8f      	ldr	r3, [pc, #572]	; (8003a20 <UART_SetConfig+0x2cc>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d005      	beq.n	80037f4 <UART_SetConfig+0xa0>
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8d      	ldr	r3, [pc, #564]	; (8003a24 <UART_SetConfig+0x2d0>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d104      	bne.n	80037fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037f4:	f7ff f980 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 80037f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037fc:	e003      	b.n	8003806 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037fe:	f7ff f967 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8003802:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	f040 810c 	bne.w	8003a2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800381e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003822:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	1891      	adds	r1, r2, r2
 800382c:	65b9      	str	r1, [r7, #88]	; 0x58
 800382e:	415b      	adcs	r3, r3
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003832:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003836:	4621      	mov	r1, r4
 8003838:	eb12 0801 	adds.w	r8, r2, r1
 800383c:	4629      	mov	r1, r5
 800383e:	eb43 0901 	adc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003864:	462b      	mov	r3, r5
 8003866:	eb49 0303 	adc.w	r3, r9, r3
 800386a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800387a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800387e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003882:	460b      	mov	r3, r1
 8003884:	18db      	adds	r3, r3, r3
 8003886:	653b      	str	r3, [r7, #80]	; 0x50
 8003888:	4613      	mov	r3, r2
 800388a:	eb42 0303 	adc.w	r3, r2, r3
 800388e:	657b      	str	r3, [r7, #84]	; 0x54
 8003890:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003898:	f7fc ff9c 	bl	80007d4 <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <UART_SetConfig+0x2d4>)
 80038a2:	fba3 2302 	umull	r2, r3, r3, r2
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	011c      	lsls	r4, r3, #4
 80038aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	1891      	adds	r1, r2, r2
 80038c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80038c4:	415b      	adcs	r3, r3
 80038c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038cc:	4641      	mov	r1, r8
 80038ce:	eb12 0a01 	adds.w	sl, r2, r1
 80038d2:	4649      	mov	r1, r9
 80038d4:	eb43 0b01 	adc.w	fp, r3, r1
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ec:	4692      	mov	sl, r2
 80038ee:	469b      	mov	fp, r3
 80038f0:	4643      	mov	r3, r8
 80038f2:	eb1a 0303 	adds.w	r3, sl, r3
 80038f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003910:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003914:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003918:	460b      	mov	r3, r1
 800391a:	18db      	adds	r3, r3, r3
 800391c:	643b      	str	r3, [r7, #64]	; 0x40
 800391e:	4613      	mov	r3, r2
 8003920:	eb42 0303 	adc.w	r3, r2, r3
 8003924:	647b      	str	r3, [r7, #68]	; 0x44
 8003926:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800392e:	f7fc ff51 	bl	80007d4 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4611      	mov	r1, r2
 8003938:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <UART_SetConfig+0x2d4>)
 800393a:	fba3 2301 	umull	r2, r3, r3, r1
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2264      	movs	r2, #100	; 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800394e:	4b36      	ldr	r3, [pc, #216]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003950:	fba3 2302 	umull	r2, r3, r3, r2
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800395c:	441c      	add	r4, r3
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003962:	2200      	movs	r2, #0
 8003964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003968:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800396c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003970:	4642      	mov	r2, r8
 8003972:	464b      	mov	r3, r9
 8003974:	1891      	adds	r1, r2, r2
 8003976:	63b9      	str	r1, [r7, #56]	; 0x38
 8003978:	415b      	adcs	r3, r3
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003980:	4641      	mov	r1, r8
 8003982:	1851      	adds	r1, r2, r1
 8003984:	6339      	str	r1, [r7, #48]	; 0x30
 8003986:	4649      	mov	r1, r9
 8003988:	414b      	adcs	r3, r1
 800398a:	637b      	str	r3, [r7, #52]	; 0x34
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003998:	4659      	mov	r1, fp
 800399a:	00cb      	lsls	r3, r1, #3
 800399c:	4651      	mov	r1, sl
 800399e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a2:	4651      	mov	r1, sl
 80039a4:	00ca      	lsls	r2, r1, #3
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	4642      	mov	r2, r8
 80039ae:	189b      	adds	r3, r3, r2
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b4:	464b      	mov	r3, r9
 80039b6:	460a      	mov	r2, r1
 80039b8:	eb42 0303 	adc.w	r3, r2, r3
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80039d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80039d4:	460b      	mov	r3, r1
 80039d6:	18db      	adds	r3, r3, r3
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039da:	4613      	mov	r3, r2
 80039dc:	eb42 0303 	adc.w	r3, r2, r3
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80039ea:	f7fc fef3 	bl	80007d4 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <UART_SetConfig+0x2d4>)
 80039f4:	fba3 1302 	umull	r1, r3, r3, r2
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	2164      	movs	r1, #100	; 0x64
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	3332      	adds	r3, #50	; 0x32
 8003a06:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <UART_SetConfig+0x2d4>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4422      	add	r2, r4
 8003a1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a1c:	e105      	b.n	8003c2a <UART_SetConfig+0x4d6>
 8003a1e:	bf00      	nop
 8003a20:	40011000 	.word	0x40011000
 8003a24:	40011400 	.word	0x40011400
 8003a28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	6239      	str	r1, [r7, #32]
 8003a46:	415b      	adcs	r3, r3
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a4e:	4641      	mov	r1, r8
 8003a50:	1854      	adds	r4, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0501 	adc.w	r5, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	00eb      	lsls	r3, r5, #3
 8003a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a66:	00e2      	lsls	r2, r4, #3
 8003a68:	4614      	mov	r4, r2
 8003a6a:	461d      	mov	r5, r3
 8003a6c:	4643      	mov	r3, r8
 8003a6e:	18e3      	adds	r3, r4, r3
 8003a70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a74:	464b      	mov	r3, r9
 8003a76:	eb45 0303 	adc.w	r3, r5, r3
 8003a7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	008b      	lsls	r3, r1, #2
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	008a      	lsls	r2, r1, #2
 8003aa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003aac:	f7fc fe92 	bl	80007d4 <__aeabi_uldivmod>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4b60      	ldr	r3, [pc, #384]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003ab6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	011c      	lsls	r4, r3, #4
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ac8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003acc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	1891      	adds	r1, r2, r2
 8003ad6:	61b9      	str	r1, [r7, #24]
 8003ad8:	415b      	adcs	r3, r3
 8003ada:	61fb      	str	r3, [r7, #28]
 8003adc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	1851      	adds	r1, r2, r1
 8003ae4:	6139      	str	r1, [r7, #16]
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	414b      	adcs	r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	00cb      	lsls	r3, r1, #3
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b02:	4651      	mov	r1, sl
 8003b04:	00ca      	lsls	r2, r1, #3
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	189b      	adds	r3, r3, r2
 8003b10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b14:	464b      	mov	r3, r9
 8003b16:	460a      	mov	r2, r1
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b38:	4649      	mov	r1, r9
 8003b3a:	008b      	lsls	r3, r1, #2
 8003b3c:	4641      	mov	r1, r8
 8003b3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b42:	4641      	mov	r1, r8
 8003b44:	008a      	lsls	r2, r1, #2
 8003b46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b4a:	f7fc fe43 	bl	80007d4 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a34      	ldr	r2, [pc, #208]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b72:	441c      	add	r4, r3
 8003b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b78:	2200      	movs	r2, #0
 8003b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8003b7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b82:	4642      	mov	r2, r8
 8003b84:	464b      	mov	r3, r9
 8003b86:	1891      	adds	r1, r2, r2
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	415b      	adcs	r3, r3
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b92:	4641      	mov	r1, r8
 8003b94:	1851      	adds	r1, r2, r1
 8003b96:	6039      	str	r1, [r7, #0]
 8003b98:	4649      	mov	r1, r9
 8003b9a:	414b      	adcs	r3, r1
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003baa:	4659      	mov	r1, fp
 8003bac:	00cb      	lsls	r3, r1, #3
 8003bae:	4651      	mov	r1, sl
 8003bb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	00ca      	lsls	r2, r1, #3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	460a      	mov	r2, r1
 8003bc8:	eb42 0303 	adc.w	r3, r2, r3
 8003bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd8:	667a      	str	r2, [r7, #100]	; 0x64
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003be6:	4649      	mov	r1, r9
 8003be8:	008b      	lsls	r3, r1, #2
 8003bea:	4641      	mov	r1, r8
 8003bec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	008a      	lsls	r2, r1, #2
 8003bf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003bf8:	f7fc fdec 	bl	80007d4 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c02:	fba3 1302 	umull	r1, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2164      	movs	r1, #100	; 0x64
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <UART_SetConfig+0x4e4>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4422      	add	r2, r4
 8003c28:	609a      	str	r2, [r3, #8]
}
 8003c2a:	bf00      	nop
 8003c2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c36:	bf00      	nop
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4d0d      	ldr	r5, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2600      	movs	r6, #0
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f000 f820 	bl	8003c94 <_init>
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2600      	movs	r6, #0
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08003ccc 	.word	0x08003ccc
 8003c78:	08003ccc 	.word	0x08003ccc
 8003c7c:	08003ccc 	.word	0x08003ccc
 8003c80:	08003cd0 	.word	0x08003cd0

08003c84 <memset>:
 8003c84:	4402      	add	r2, r0
 8003c86:	4603      	mov	r3, r0
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <memset+0xa>
 8003c8c:	4770      	bx	lr
 8003c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c92:	e7f9      	b.n	8003c88 <memset+0x4>

08003c94 <_init>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_fini>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

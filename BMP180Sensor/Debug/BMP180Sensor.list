
BMP180Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001864  08001864  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001864  08001864  00011864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800186c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000050  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000064  20000064  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005c94  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d18  00000000  00000000  00025cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000868  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007e0  00000000  00000000  00027258  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002784  00000000  00000000  00027a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000258a  00000000  00000000  0002a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002c746  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000024e4  00000000  00000000  0002c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002eca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800184c 	.word	0x0800184c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800184c 	.word	0x0800184c

080001c8 <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <FLASH_SetLatency+0x1c>)
 80001d2:	687a      	ldr	r2, [r7, #4]
 80001d4:	b2d2      	uxtb	r2, r2
 80001d6:	701a      	strb	r2, [r3, #0]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	40023c00 	.word	0x40023c00

080001e8 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d006      	beq.n	8000206 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80001f8:	4a09      	ldr	r2, [pc, #36]	; (8000220 <FLASH_PrefetchBufferCmd+0x38>)
 80001fa:	4b09      	ldr	r3, [pc, #36]	; (8000220 <FLASH_PrefetchBufferCmd+0x38>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000202:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8000204:	e005      	b.n	8000212 <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8000206:	4a06      	ldr	r2, [pc, #24]	; (8000220 <FLASH_PrefetchBufferCmd+0x38>)
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <FLASH_PrefetchBufferCmd+0x38>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000210:	6013      	str	r3, [r2, #0]
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	40023c00 	.word	0x40023c00

08000224 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000224:	b480      	push	{r7}
 8000226:	b087      	sub	sp, #28
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	e076      	b.n	800032e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000240:	2201      	movs	r2, #1
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	fa02 f303 	lsl.w	r3, r2, r3
 8000248:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	4013      	ands	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000254:	68fa      	ldr	r2, [r7, #12]
 8000256:	693b      	ldr	r3, [r7, #16]
 8000258:	429a      	cmp	r2, r3
 800025a:	d165      	bne.n	8000328 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	2103      	movs	r1, #3
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	43db      	mvns	r3, r3
 800026c:	401a      	ands	r2, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	791b      	ldrb	r3, [r3, #4]
 800027a:	4619      	mov	r1, r3
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	791b      	ldrb	r3, [r3, #4]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d003      	beq.n	800029a <GPIO_Init+0x76>
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	791b      	ldrb	r3, [r3, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	d12e      	bne.n	80002f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	689a      	ldr	r2, [r3, #8]
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	2103      	movs	r1, #3
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	43db      	mvns	r3, r3
 80002aa:	401a      	ands	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689a      	ldr	r2, [r3, #8]
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	795b      	ldrb	r3, [r3, #5]
 80002b8:	4619      	mov	r1, r3
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	fa01 f303 	lsl.w	r3, r1, r3
 80002c2:	431a      	orrs	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	b29b      	uxth	r3, r3
 80002d0:	4619      	mov	r1, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	408b      	lsls	r3, r1
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	683a      	ldr	r2, [r7, #0]
 80002e4:	7992      	ldrb	r2, [r2, #6]
 80002e6:	4611      	mov	r1, r2
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	b292      	uxth	r2, r2
 80002ec:	fa01 f202 	lsl.w	r2, r1, r2
 80002f0:	b292      	uxth	r2, r2
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68da      	ldr	r2, [r3, #12]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	2103      	movs	r1, #3
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	43db      	mvns	r3, r3
 800030a:	401a      	ands	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	68da      	ldr	r2, [r3, #12]
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	79db      	ldrb	r3, [r3, #7]
 8000318:	4619      	mov	r1, r3
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	431a      	orrs	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	3301      	adds	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	d985      	bls.n	8000240 <GPIO_Init+0x1c>
    }
  }
}
 8000334:	bf00      	nop
 8000336:	371c      	adds	r7, #28
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr

08000340 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	807b      	strh	r3, [r7, #2]
 800034c:	4613      	mov	r3, r2
 800034e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000358:	787a      	ldrb	r2, [r7, #1]
 800035a:	887b      	ldrh	r3, [r7, #2]
 800035c:	f003 0307 	and.w	r3, r3, #7
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000368:	887b      	ldrh	r3, [r7, #2]
 800036a:	08db      	lsrs	r3, r3, #3
 800036c:	b29b      	uxth	r3, r3
 800036e:	4618      	mov	r0, r3
 8000370:	887b      	ldrh	r3, [r7, #2]
 8000372:	08db      	lsrs	r3, r3, #3
 8000374:	b29b      	uxth	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3208      	adds	r2, #8
 800037c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000380:	887b      	ldrh	r3, [r7, #2]
 8000382:	f003 0307 	and.w	r3, r3, #7
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	210f      	movs	r1, #15
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	ea02 0103 	and.w	r1, r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f100 0208 	add.w	r2, r0, #8
 800039a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800039e:	887b      	ldrh	r3, [r7, #2]
 80003a0:	08db      	lsrs	r3, r3, #3
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3208      	adds	r2, #8
 80003aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80003b4:	887b      	ldrh	r3, [r7, #2]
 80003b6:	08db      	lsrs	r3, r3, #3
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3208      	adds	r2, #8
 80003c0:	68b9      	ldr	r1, [r7, #8]
 80003c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80003e2:	2300      	movs	r3, #0
 80003e4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80003e6:	2304      	movs	r3, #4
 80003e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80003ea:	4b57      	ldr	r3, [pc, #348]	; (8000548 <I2C_Init+0x174>)
 80003ec:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	889b      	ldrh	r3, [r3, #4]
 80003f2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80003f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003fa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fb05 	bl	8000a10 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	4a4f      	ldr	r2, [pc, #316]	; (800054c <I2C_Init+0x178>)
 800040e:	fba2 2303 	umull	r2, r3, r2, r3
 8000412:	0c9b      	lsrs	r3, r3, #18
 8000414:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000416:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800041a:	4313      	orrs	r3, r2
 800041c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000422:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	b29b      	uxth	r3, r3
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	b29a      	uxth	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a44      	ldr	r2, [pc, #272]	; (8000550 <I2C_Init+0x17c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d815      	bhi.n	800046e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	69fa      	ldr	r2, [r7, #28]
 800044a:	fbb2 f3f3 	udiv	r3, r2, r3
 800044e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000452:	2b03      	cmp	r3, #3
 8000454:	d801      	bhi.n	800045a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000456:	2304      	movs	r3, #4
 8000458:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800045a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800045c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800045e:	4313      	orrs	r3, r2
 8000460:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000464:	3301      	adds	r3, #1
 8000466:	b29a      	uxth	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	841a      	strh	r2, [r3, #32]
 800046c:	e040      	b.n	80004f0 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	88db      	ldrh	r3, [r3, #6]
 8000472:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000476:	4293      	cmp	r3, r2
 8000478:	d109      	bne.n	800048e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4613      	mov	r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	4413      	add	r3, r2
 8000484:	69fa      	ldr	r2, [r7, #28]
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800048c:	e00e      	b.n	80004ac <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	4613      	mov	r3, r2
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4413      	add	r3, r2
 8000498:	009a      	lsls	r2, r3, #2
 800049a:	4413      	add	r3, r2
 800049c:	69fa      	ldr	r2, [r7, #28]
 800049e:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80004a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004aa:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 80004ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d103      	bne.n	80004be <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80004b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80004be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80004c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80004c2:	4313      	orrs	r3, r2
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80004ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80004ce:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80004d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004d6:	fb02 f303 	mul.w	r3, r2, r3
 80004da:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <I2C_Init+0x180>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1192      	asrs	r2, r2, #6
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	3301      	adds	r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004f4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	b29a      	uxth	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800050c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800050e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000512:	f023 0302 	bic.w	r3, r3, #2
 8000516:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	889a      	ldrh	r2, [r3, #4]
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	895b      	ldrh	r3, [r3, #10]
 8000520:	4313      	orrs	r3, r2
 8000522:	b29a      	uxth	r2, r3
 8000524:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000526:	4313      	orrs	r3, r2
 8000528:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800052e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	899a      	ldrh	r2, [r3, #12]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	891b      	ldrh	r3, [r3, #8]
 8000538:	4313      	orrs	r3, r2
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	811a      	strh	r2, [r3, #8]
}
 8000540:	bf00      	nop
 8000542:	3728      	adds	r7, #40	; 0x28
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	007a1200 	.word	0x007a1200
 800054c:	431bde83 	.word	0x431bde83
 8000550:	000186a0 	.word	0x000186a0
 8000554:	10624dd3 	.word	0x10624dd3

08000558 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d008      	beq.n	800057c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	b29b      	uxth	r3, r3
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800057a:	e007      	b.n	800058c <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	b29b      	uxth	r3, r3
 8000582:	f023 0301 	bic.w	r3, r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d008      	beq.n	80005bc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 80005ba:	e007      	b.n	80005cc <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	801a      	strh	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80005fa:	e007      	b.n	800060c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000606:	b29a      	uxth	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	801a      	strh	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
 8000624:	4613      	mov	r3, r2
 8000626:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	70fb      	strb	r3, [r7, #3]
 8000636:	e003      	b.n	8000640 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	f023 0301 	bic.w	r3, r3, #1
 800063e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	b29a      	uxth	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	821a      	strh	r2, [r3, #16]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d008      	beq.n	8000678 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000670:	b29a      	uxth	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 8000676:	e007      	b.n	8000688 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000682:	b29a      	uxth	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	801a      	strh	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d108      	bne.n	80006b8 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 80006b6:	e007      	b.n	80006c8 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	881b      	ldrh	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	801a      	strh	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	821a      	strh	r2, [r3, #16]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	8a1b      	ldrh	r3, [r3, #16]
 8000700:	b29b      	uxth	r3, r3
 8000702:	b2db      	uxtb	r3, r3
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	8a9b      	ldrh	r3, [r3, #20]
 800072e:	b29b      	uxth	r3, r3
 8000730:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	8b1b      	ldrh	r3, [r3, #24]
 8000736:	b29b      	uxth	r3, r3
 8000738:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000740:	68fa      	ldr	r2, [r7, #12]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	4313      	orrs	r3, r2
 8000746:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800074a:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	401a      	ands	r2, r3
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d102      	bne.n	800075e <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000758:	2301      	movs	r3, #1
 800075a:	75fb      	strb	r3, [r7, #23]
 800075c:	e001      	b.n	8000762 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800075e:	2300      	movs	r3, #0
 8000760:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000762:	7dfb      	ldrb	r3, [r7, #23]
}
 8000764:	4618      	mov	r0, r3
 8000766:	371c      	adds	r7, #28
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000770:	b480      	push	{r7}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	0f1b      	lsrs	r3, r3, #28
 800078e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000796:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3314      	adds	r3, #20
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e005      	b.n	80007b2 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	0c1b      	lsrs	r3, r3, #16
 80007aa:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	3318      	adds	r3, #24
 80007b0:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	4013      	ands	r3, r2
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80007be:	2301      	movs	r3, #1
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e001      	b.n	80007c8 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <RCC_DeInit+0x50>)
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <RCC_DeInit+0x50>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <RCC_DeInit+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80007ee:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <RCC_DeInit+0x50>)
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <RCC_DeInit+0x50>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80007f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <RCC_DeInit+0x50>)
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <RCC_DeInit+0x54>)
 8000802:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <RCC_DeInit+0x50>)
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <RCC_DeInit+0x58>)
 8000808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <RCC_DeInit+0x50>)
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <RCC_DeInit+0x50>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <RCC_DeInit+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800
 800082c:	24003010 	.word	0x24003010
 8000830:	20003000 	.word	0x20003000

08000834 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <RCC_HSEConfig+0x24>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <RCC_HSEConfig+0x24>)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	7013      	strb	r3, [r2, #0]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023802 	.word	0x40023802

0800085c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800086e:	2031      	movs	r0, #49	; 0x31
 8000870:	f000 f9b6 	bl	8000be0 <RCC_GetFlagStatus>
 8000874:	4603      	mov	r3, r0
 8000876:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000884:	d002      	beq.n	800088c <RCC_WaitForHSEStartUp+0x30>
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f0      	beq.n	800086e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800088c:	2031      	movs	r0, #49	; 0x31
 800088e:	f000 f9a7 	bl	8000be0 <RCC_GetFlagStatus>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000898:	2301      	movs	r3, #1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	e001      	b.n	80008a2 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80008ba:	490b      	ldr	r1, [pc, #44]	; (80008e8 <RCC_PLLConfig+0x3c>)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	019a      	lsls	r2, r3, #6
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	431a      	orrs	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	085b      	lsrs	r3, r3, #1
 80008c8:	3b01      	subs	r3, #1
 80008ca:	041b      	lsls	r3, r3, #16
 80008cc:	431a      	orrs	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80008d6:	4313      	orrs	r3, r2
 80008d8:	604b      	str	r3, [r1, #4]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80008f6:	4a04      	ldr	r2, [pc, #16]	; (8000908 <RCC_PLLCmd+0x1c>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	6013      	str	r3, [r2, #0]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	42470060 	.word	0x42470060

0800090c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <RCC_SYSCLKConfig+0x34>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f023 0303 	bic.w	r3, r3, #3
 8000924:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <RCC_SYSCLKConfig+0x34>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	6093      	str	r3, [r2, #8]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <RCC_GetSYSCLKSource+0x1c>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 030c 	and.w	r3, r3, #12
 8000952:	b2db      	uxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <RCC_HCLKConfig+0x34>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800097c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <RCC_HCLKConfig+0x34>)
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6093      	str	r3, [r2, #8]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <RCC_PCLK1Config+0x34>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <RCC_PCLK1Config+0x34>)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6093      	str	r3, [r2, #8]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40023800 	.word	0x40023800

080009d4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <RCC_PCLK2Config+0x38>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <RCC_PCLK2Config+0x38>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6093      	str	r3, [r2, #8]
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a30:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f003 030c 	and.w	r3, r3, #12
 8000a38:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d007      	beq.n	8000a50 <RCC_GetClocksFreq+0x40>
 8000a40:	2b08      	cmp	r3, #8
 8000a42:	d009      	beq.n	8000a58 <RCC_GetClocksFreq+0x48>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d13d      	bne.n	8000ac4 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <RCC_GetClocksFreq+0x144>)
 8000a4c:	601a      	str	r2, [r3, #0]
      break;
 8000a4e:	e03d      	b.n	8000acc <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <RCC_GetClocksFreq+0x148>)
 8000a54:	601a      	str	r2, [r3, #0]
      break;
 8000a56:	e039      	b.n	8000acc <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a58:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	0d9b      	lsrs	r3, r3, #22
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a64:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a6c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00c      	beq.n	8000a8e <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a74:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <RCC_GetClocksFreq+0x148>)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7c:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000a7e:	6852      	ldr	r2, [r2, #4]
 8000a80:	0992      	lsrs	r2, r2, #6
 8000a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	e00b      	b.n	8000aa6 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000a8e:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <RCC_GetClocksFreq+0x144>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4a2e      	ldr	r2, [pc, #184]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000a98:	6852      	ldr	r2, [r2, #4]
 8000a9a:	0992      	lsrs	r2, r2, #6
 8000a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
 8000aa4:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	0c1b      	lsrs	r3, r3, #16
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	601a      	str	r2, [r3, #0]
      break;
 8000ac2:	e003      	b.n	8000acc <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <RCC_GetClocksFreq+0x144>)
 8000ac8:	601a      	str	r2, [r3, #0]
      break;
 8000aca:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ad4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	091b      	lsrs	r3, r3, #4
 8000ada:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000adc:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	40da      	lsrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000afc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	0a9b      	lsrs	r3, r3, #10
 8000b02:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	40da      	lsrs	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <RCC_GetClocksFreq+0x140>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b24:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	0b5b      	lsrs	r3, r3, #13
 8000b2a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <RCC_GetClocksFreq+0x14c>)
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	40da      	lsrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60da      	str	r2, [r3, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3724      	adds	r7, #36	; 0x24
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40023800 	.word	0x40023800
 8000b54:	00f42400 	.word	0x00f42400
 8000b58:	007a1200 	.word	0x007a1200
 8000b5c:	20000000 	.word	0x20000000

08000b60 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b72:	490a      	ldr	r1, [pc, #40]	; (8000b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b7e:	e006      	b.n	8000b8e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b80:	4906      	ldr	r1, [pc, #24]	; (8000b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000bb2:	490a      	ldr	r1, [pc, #40]	; (8000bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8000bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000bbe:	e006      	b.n	8000bce <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <RCC_APB1PeriphClockCmd+0x3c>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4013      	ands	r3, r2
 8000bcc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d103      	bne.n	8000c0c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <RCC_GetFlagStatus+0x70>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d103      	bne.n	8000c1a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <RCC_GetFlagStatus+0x70>)
 8000c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e002      	b.n	8000c20 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <RCC_GetFlagStatus+0x70>)
 8000c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c1e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	74fb      	strb	r3, [r7, #19]
 8000c3c:	e001      	b.n	8000c42 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000c42:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	40023800 	.word	0x40023800

08000c54 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <TIM_TimeBaseInit+0xbc>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d013      	beq.n	8000c98 <TIM_TimeBaseInit+0x44>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <TIM_TimeBaseInit+0xc0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00f      	beq.n	8000c98 <TIM_TimeBaseInit+0x44>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c7e:	d00b      	beq.n	8000c98 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <TIM_TimeBaseInit+0xc4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d007      	beq.n	8000c98 <TIM_TimeBaseInit+0x44>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <TIM_TimeBaseInit+0xc8>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d003      	beq.n	8000c98 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <TIM_TimeBaseInit+0xcc>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d108      	bne.n	8000caa <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c9e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	885a      	ldrh	r2, [r3, #2]
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <TIM_TimeBaseInit+0xd0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00c      	beq.n	8000ccc <TIM_TimeBaseInit+0x78>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <TIM_TimeBaseInit+0xd4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d008      	beq.n	8000ccc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cc0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	891a      	ldrh	r2, [r3, #8]
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	89fa      	ldrh	r2, [r7, #14]
 8000cd0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <TIM_TimeBaseInit+0xbc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d003      	beq.n	8000cf2 <TIM_TimeBaseInit+0x9e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <TIM_TimeBaseInit+0xc0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d104      	bne.n	8000cfc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	7a9b      	ldrb	r3, [r3, #10]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	829a      	strh	r2, [r3, #20]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40010400 	.word	0x40010400
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40000c00 	.word	0x40000c00
 8000d24:	40001000 	.word	0x40001000
 8000d28:	40001400 	.word	0x40001400

08000d2c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000d82:	e007      	b.n	8000d94 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	801a      	strh	r2, [r3, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <main>:

RCC_ClocksTypeDef rcc; // for debug


int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//RCC_DeInit();
	RCC_Config();
 8000da4:	f000 f814 	bl	8000dd0 <RCC_Config>
	gpio_config();
 8000da8:	f000 f894 	bl	8000ed4 <gpio_config>
	i2c_init();
 8000dac:	f000 f8ee 	bl	8000f8c <i2c_init>
	delayConfig();
 8000db0:	f000 f854 	bl	8000e5c <delayConfig>
	//RCC_GetClocksFreq(&rcc);

  while (1)
  {
	  BMP180_GetCalibration();
 8000db4:	f000 f91a 	bl	8000fec <BMP180_GetCalibration>
	  BMP180_Read_UncompensatedTempValue();
 8000db8:	f000 fab2 	bl	8001320 <BMP180_Read_UncompensatedTempValue>
	  temperature = BMP180_TemperatureValue();
 8000dbc:	f000 fbb0 	bl	8001520 <BMP180_TemperatureValue>
 8000dc0:	eef0 7a40 	vmov.f32	s15, s0
 8000dc4:	4b01      	ldr	r3, [pc, #4]	; (8000dcc <main+0x2c>)
 8000dc6:	edc3 7a00 	vstr	s15, [r3]
	  BMP180_GetCalibration();
 8000dca:	e7f3      	b.n	8000db4 <main+0x14>
 8000dcc:	20000030 	.word	0x20000030

08000dd0 <RCC_Config>:
	  UNUSED(temperature);
  }
}

void RCC_Config()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af02      	add	r7, sp, #8

	RCC_DeInit();
 8000dd6:	f7ff fcff 	bl	80007d8 <RCC_DeInit>
	RCC_HSEConfig(RCC_HSE_ON);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fd2a 	bl	8000834 <RCC_HSEConfig>
	FLASH_PrefetchBufferCmd(ENABLE);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff fa01 	bl	80001e8 <FLASH_PrefetchBufferCmd>
	FLASH_SetLatency(FLASH_Latency_2);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff f9ee 	bl	80001c8 <FLASH_SetLatency>
	while(RCC_WaitForHSEStartUp() != SUCCESS);
 8000dec:	bf00      	nop
 8000dee:	f7ff fd35 	bl	800085c <RCC_WaitForHSEStartUp>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d1fa      	bne.n	8000dee <RCC_Config+0x1e>
	while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) != SET);
 8000df8:	bf00      	nop
 8000dfa:	2031      	movs	r0, #49	; 0x31
 8000dfc:	f7ff fef0 	bl	8000be0 <RCC_GetFlagStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f9      	bne.n	8000dfa <RCC_Config+0x2a>


	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fdac 	bl	8000964 <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div2);
 8000e0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e10:	f7ff fdc4 	bl	800099c <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);
 8000e14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e18:	f7ff fddc 	bl	80009d4 <RCC_PCLK2Config>
	RCC_PLLConfig(RCC_PLLSource_HSE,8,168,2,4);
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2302      	movs	r3, #2
 8000e22:	22a8      	movs	r2, #168	; 0xa8
 8000e24:	2108      	movs	r1, #8
 8000e26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e2a:	f7ff fd3f 	bl	80008ac <RCC_PLLConfig>

	RCC_PLLCmd(ENABLE);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f7ff fd5c 	bl	80008ec <RCC_PLLCmd>

	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY != SET));
 8000e34:	bf00      	nop
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fed2 	bl	8000be0 <RCC_GetFlagStatus>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <RCC_Config+0x66>

	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fd62 	bl	800090c <RCC_SYSCLKConfig>

	while(RCC_GetSYSCLKSource() != is_PLL_Clk);
 8000e48:	bf00      	nop
 8000e4a:	f7ff fd7b 	bl	8000944 <RCC_GetSYSCLKSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d1fa      	bne.n	8000e4a <RCC_Config+0x7a>

}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <delayConfig>:

void delayConfig()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
 8000e62:	2101      	movs	r1, #1
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff fe9b 	bl	8000ba0 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef tim_init;
	memset(&tim_init,0,sizeof(tim_init));
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	220c      	movs	r2, #12
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fce3 	bl	800183c <memset>

	tim_init.TIM_ClockDivision = TIM_CKD_DIV2 ;
 8000e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7a:	81bb      	strh	r3, [r7, #12]
	tim_init.TIM_CounterMode = TIM_CounterMode_Up;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	80fb      	strh	r3, [r7, #6]
	tim_init.TIM_Period = 0xFF;
 8000e80:	23ff      	movs	r3, #255	; 0xff
 8000e82:	60bb      	str	r3, [r7, #8]
	tim_init.TIM_Prescaler =41999 ;
 8000e84:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8000e88:	80bb      	strh	r3, [r7, #4]
	//tim_init.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM3,&tim_init);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <delayConfig+0x48>)
 8000e90:	f7ff fee0 	bl	8000c54 <TIM_TimeBaseInit>

	TIM_Cmd(TIM3,ENABLE);
 8000e94:	2101      	movs	r1, #1
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <delayConfig+0x48>)
 8000e98:	f7ff ff62 	bl	8000d60 <TIM_Cmd>
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <delay>:

void delay()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	TIM_SetCounter(TIM3,0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <delay+0x24>)
 8000eb0:	f7ff ff3c 	bl	8000d2c <TIM_SetCounter>
	while(TIM_GetCounter(TIM3) != (wait_ms));
 8000eb4:	bf00      	nop
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <delay+0x24>)
 8000eb8:	f7ff ff46 	bl	8000d48 <TIM_GetCounter>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <delay+0x28>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d1f7      	bne.n	8000eb6 <delay+0xe>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	20000010 	.word	0x20000010

08000ed4 <gpio_config>:

void gpio_config()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);  //for LED
 8000eda:	2101      	movs	r1, #1
 8000edc:	2008      	movs	r0, #8
 8000ede:	f7ff fe3f 	bl	8000b60 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);  //for i2c
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fe3b 	bl	8000b60 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);  // for timer
 8000eea:	2101      	movs	r1, #1
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fe37 	bl	8000b60 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 fc9f 	bl	800183c <memset>

	// i2c sda ->B7 scl->B6
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource7,GPIO_AF_I2C1);
 8000efe:	2204      	movs	r2, #4
 8000f00:	2107      	movs	r1, #7
 8000f02:	481f      	ldr	r0, [pc, #124]	; (8000f80 <gpio_config+0xac>)
 8000f04:	f7ff fa1c 	bl	8000340 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB,GPIO_PinSource6,GPIO_AF_I2C1);
 8000f08:	2204      	movs	r2, #4
 8000f0a:	2106      	movs	r1, #6
 8000f0c:	481c      	ldr	r0, [pc, #112]	; (8000f80 <gpio_config+0xac>)
 8000f0e:	f7ff fa17 	bl	8000340 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f12:	2302      	movs	r3, #2
 8000f14:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
 8000f16:	2301      	movs	r3, #1
 8000f18:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_7|GPIO_Pin_6;
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000f22:	2303      	movs	r3, #3
 8000f24:	717b      	strb	r3, [r7, #5]


	GPIO_Init(GPIOB,&GPIO_InitStruct);
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <gpio_config+0xac>)
 8000f2c:	f7ff f97a 	bl	8000224 <GPIO_Init>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000f30:	2301      	movs	r3, #1
 8000f32:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000f34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f38:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000f42:	2303      	movs	r3, #3
 8000f44:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <gpio_config+0xb0>)
 8000f4c:	f7ff f96a 	bl	8000224 <GPIO_Init>

	//timer

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource6,GPIO_AF_TIM3);
 8000f50:	2202      	movs	r2, #2
 8000f52:	2106      	movs	r1, #6
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <gpio_config+0xb4>)
 8000f56:	f7ff f9f3 	bl	8000340 <GPIO_PinAFConfig>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <gpio_config+0xb4>)
 8000f74:	f7ff f956 	bl	8000224 <GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40020000 	.word	0x40020000

08000f8c <i2c_init>:
void i2c_init()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);
 8000f92:	2101      	movs	r1, #1
 8000f94:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000f98:	f7ff fe02 	bl	8000ba0 <RCC_APB1PeriphClockCmd>

	I2C_InitTypeDef i2c_init;
	memset(&i2c_init,0,sizeof(i2c_init));
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fc4a 	bl	800183c <memset>

	//I2C_DeInit(I2C1);

	i2c_init.I2C_Ack = I2C_Ack_Enable;
 8000fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fac:	817b      	strh	r3, [r7, #10]
	i2c_init.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000fae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb2:	81bb      	strh	r3, [r7, #12]
	i2c_init.I2C_ClockSpeed = 400000;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <i2c_init+0x58>)
 8000fb6:	603b      	str	r3, [r7, #0]
	i2c_init.I2C_DutyCycle = I2C_DutyCycle_2;
 8000fb8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000fbc:	80fb      	strh	r3, [r7, #6]
	i2c_init.I2C_Mode = I2C_Mode_I2C;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	80bb      	strh	r3, [r7, #4]
	I2C_StretchClockCmd(I2C1,ENABLE);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <i2c_init+0x5c>)
 8000fc6:	f7ff fb65 	bl	8000694 <I2C_StretchClockCmd>

	I2C_Init(I2C1,&i2c_init);
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <i2c_init+0x5c>)
 8000fd0:	f7ff fa00 	bl	80003d4 <I2C_Init>

	I2C_Cmd(I2C1,ENABLE);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <i2c_init+0x5c>)
 8000fd8:	f7ff fabe 	bl	8000558 <I2C_Cmd>

}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	00061a80 	.word	0x00061a80
 8000fe8:	40005400 	.word	0x40005400

08000fec <BMP180_GetCalibration>:


void BMP180_GetCalibration()
{
 8000fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4668      	mov	r0, sp
 8000ff6:	4680      	mov	r8, r0
	      uint8_t CALIBRATION_SIZE = 22;
 8000ff8:	2016      	movs	r0, #22
 8000ffa:	73f8      	strb	r0, [r7, #15]
	      uint8_t bmp180_calibArray[CALIBRATION_SIZE];
 8000ffc:	7bf8      	ldrb	r0, [r7, #15]
 8000ffe:	4605      	mov	r5, r0
 8001000:	3d01      	subs	r5, #1
 8001002:	60bd      	str	r5, [r7, #8]
 8001004:	b2c5      	uxtb	r5, r0
 8001006:	f04f 0600 	mov.w	r6, #0
 800100a:	00f2      	lsls	r2, r6, #3
 800100c:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8001010:	00e9      	lsls	r1, r5, #3
 8001012:	b2c1      	uxtb	r1, r0
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	00d4      	lsls	r4, r2, #3
 800101a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800101e:	00cb      	lsls	r3, r1, #3
 8001020:	4603      	mov	r3, r0
 8001022:	3307      	adds	r3, #7
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	ebad 0d03 	sub.w	sp, sp, r3
 800102c:	466b      	mov	r3, sp
 800102e:	3300      	adds	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
	      uint8_t i = 0 ;
 8001032:	2300      	movs	r3, #0
 8001034:	73bb      	strb	r3, [r7, #14]
	      uint8_t BMPRegAddr = (uint8_t)0xAA;
 8001036:	23aa      	movs	r3, #170	; 0xaa
 8001038:	70fb      	strb	r3, [r7, #3]


		  while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 800103a:	bf00      	nop
 800103c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001040:	48a4      	ldr	r0, [pc, #656]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 8001042:	f7ff fb95 	bl	8000770 <I2C_GetFlagStatus>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f7      	bne.n	800103c <BMP180_GetCalibration+0x50>
		  I2C_GenerateSTART(I2C1,ENABLE);
 800104c:	2101      	movs	r1, #1
 800104e:	48a1      	ldr	r0, [pc, #644]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 8001050:	f7ff faa2 	bl	8000598 <I2C_GenerateSTART>
		  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001054:	bf00      	nop
 8001056:	49a0      	ldr	r1, [pc, #640]	; (80012d8 <BMP180_GetCalibration+0x2ec>)
 8001058:	489e      	ldr	r0, [pc, #632]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800105a:	f7ff fb59 	bl	8000710 <I2C_CheckEvent>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f8      	beq.n	8001056 <BMP180_GetCalibration+0x6a>


	      I2C_Send7bitAddress(I2C1, BMPAddrWrite, I2C_Direction_Transmitter);
 8001064:	2200      	movs	r2, #0
 8001066:	21ee      	movs	r1, #238	; 0xee
 8001068:	489a      	ldr	r0, [pc, #616]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800106a:	f7ff fad5 	bl	8000618 <I2C_Send7bitAddress>
	      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800106e:	bf00      	nop
 8001070:	499a      	ldr	r1, [pc, #616]	; (80012dc <BMP180_GetCalibration+0x2f0>)
 8001072:	4898      	ldr	r0, [pc, #608]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 8001074:	f7ff fb4c 	bl	8000710 <I2C_CheckEvent>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f8      	beq.n	8001070 <BMP180_GetCalibration+0x84>

	      I2C_Cmd(I2C1,ENABLE);
 800107e:	2101      	movs	r1, #1
 8001080:	4894      	ldr	r0, [pc, #592]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 8001082:	f7ff fa69 	bl	8000558 <I2C_Cmd>
	      while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_TXE));
 8001086:	bf00      	nop
 8001088:	4995      	ldr	r1, [pc, #596]	; (80012e0 <BMP180_GetCalibration+0x2f4>)
 800108a:	4892      	ldr	r0, [pc, #584]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800108c:	f7ff fb70 	bl	8000770 <I2C_GetFlagStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f8      	beq.n	8001088 <BMP180_GetCalibration+0x9c>
	      I2C_SendData(I2C1,BMPRegAddr);
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	4619      	mov	r1, r3
 800109a:	488e      	ldr	r0, [pc, #568]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800109c:	f7ff fb1a 	bl	80006d4 <I2C_SendData>
	      while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80010a0:	bf00      	nop
 80010a2:	4990      	ldr	r1, [pc, #576]	; (80012e4 <BMP180_GetCalibration+0x2f8>)
 80010a4:	488b      	ldr	r0, [pc, #556]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010a6:	f7ff fb33 	bl	8000710 <I2C_CheckEvent>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0f8      	beq.n	80010a2 <BMP180_GetCalibration+0xb6>

	      I2C_GenerateSTART(I2C1,ENABLE);
 80010b0:	2101      	movs	r1, #1
 80010b2:	4888      	ldr	r0, [pc, #544]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010b4:	f7ff fa70 	bl	8000598 <I2C_GenerateSTART>

	      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 80010b8:	bf00      	nop
 80010ba:	4987      	ldr	r1, [pc, #540]	; (80012d8 <BMP180_GetCalibration+0x2ec>)
 80010bc:	4885      	ldr	r0, [pc, #532]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010be:	f7ff fb27 	bl	8000710 <I2C_CheckEvent>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f8      	beq.n	80010ba <BMP180_GetCalibration+0xce>
	      I2C_Send7bitAddress(I2C1, BMPAddrRead, I2C_Direction_Receiver);
 80010c8:	2201      	movs	r2, #1
 80010ca:	21ef      	movs	r1, #239	; 0xef
 80010cc:	4881      	ldr	r0, [pc, #516]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010ce:	f7ff faa3 	bl	8000618 <I2C_Send7bitAddress>
	      while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)){}
 80010d2:	bf00      	nop
 80010d4:	4984      	ldr	r1, [pc, #528]	; (80012e8 <BMP180_GetCalibration+0x2fc>)
 80010d6:	487f      	ldr	r0, [pc, #508]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010d8:	f7ff fb1a 	bl	8000710 <I2C_CheckEvent>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f8      	beq.n	80010d4 <BMP180_GetCalibration+0xe8>

	  	  while(CALIBRATION_SIZE)
 80010e2:	e027      	b.n	8001134 <BMP180_GetCalibration+0x148>
	  	  {
	        if(CALIBRATION_SIZE == 1)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <BMP180_GetCalibration+0x10e>
	        {
	          I2C_AcknowledgeConfig(I2C1,DISABLE);
 80010ea:	2100      	movs	r1, #0
 80010ec:	4879      	ldr	r0, [pc, #484]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010ee:	f7ff fab1 	bl	8000654 <I2C_AcknowledgeConfig>
	          I2C_GenerateSTOP(I2C1,ENABLE);
 80010f2:	2101      	movs	r1, #1
 80010f4:	4877      	ldr	r0, [pc, #476]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80010f6:	f7ff fa6f 	bl	80005d8 <I2C_GenerateSTOP>
	        }

	         while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE));
 80010fa:	bf00      	nop
 80010fc:	497b      	ldr	r1, [pc, #492]	; (80012ec <BMP180_GetCalibration+0x300>)
 80010fe:	4875      	ldr	r0, [pc, #468]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 8001100:	f7ff fb36 	bl	8000770 <I2C_GetFlagStatus>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f8      	beq.n	80010fc <BMP180_GetCalibration+0x110>
	         if (I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 800110a:	4979      	ldr	r1, [pc, #484]	; (80012f0 <BMP180_GetCalibration+0x304>)
 800110c:	4871      	ldr	r0, [pc, #452]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800110e:	f7ff faff 	bl	8000710 <I2C_CheckEvent>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00a      	beq.n	800112e <BMP180_GetCalibration+0x142>
	         {
	           bmp180_calibArray[i] = I2C_ReceiveData(I2C1);
 8001118:	7bbc      	ldrb	r4, [r7, #14]
 800111a:	486e      	ldr	r0, [pc, #440]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 800111c:	f7ff faea 	bl	80006f4 <I2C_ReceiveData>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	551a      	strb	r2, [r3, r4]
	           ++i;
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	3301      	adds	r3, #1
 800112c:	73bb      	strb	r3, [r7, #14]
	  	     }
	         CALIBRATION_SIZE--;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3b01      	subs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
	  	  while(CALIBRATION_SIZE)
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1d4      	bne.n	80010e4 <BMP180_GetCalibration+0xf8>
	  	  }

	      i = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	73bb      	strb	r3, [r7, #14]

	AC1 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7bbb      	ldrb	r3, [r7, #14]
 800114a:	3301      	adds	r3, #1
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	5ccb      	ldrb	r3, [r1, r3]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b67      	ldr	r3, [pc, #412]	; (80012f4 <BMP180_GetCalibration+0x308>)
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	3302      	adds	r3, #2
 800115e:	73bb      	strb	r3, [r7, #14]
	AC2 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	3301      	adds	r3, #1
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	5ccb      	ldrb	r3, [r1, r3]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <BMP180_GetCalibration+0x30c>)
 800117a:	801a      	strh	r2, [r3, #0]
 800117c:	7bbb      	ldrb	r3, [r7, #14]
 800117e:	3302      	adds	r3, #2
 8001180:	73bb      	strb	r3, [r7, #14]
	AC3 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	3301      	adds	r3, #1
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	5ccb      	ldrb	r3, [r1, r3]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	4b58      	ldr	r3, [pc, #352]	; (80012fc <BMP180_GetCalibration+0x310>)
 800119c:	801a      	strh	r2, [r3, #0]
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	3302      	adds	r3, #2
 80011a2:	73bb      	strb	r3, [r7, #14]
	AC4 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 80011a4:	7bbb      	ldrb	r3, [r7, #14]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	3301      	adds	r3, #1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	5ccb      	ldrb	r3, [r1, r3]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b50      	ldr	r3, [pc, #320]	; (8001300 <BMP180_GetCalibration+0x314>)
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	7bbb      	ldrb	r3, [r7, #14]
 80011c4:	3302      	adds	r3, #2
 80011c6:	73bb      	strb	r3, [r7, #14]
	AC5 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	3301      	adds	r3, #1
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	5ccb      	ldrb	r3, [r1, r3]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21b      	sxth	r3, r3
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b48      	ldr	r3, [pc, #288]	; (8001304 <BMP180_GetCalibration+0x318>)
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	3302      	adds	r3, #2
 80011ea:	73bb      	strb	r3, [r7, #14]
	AC6 = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	3301      	adds	r3, #1
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21b      	sxth	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <BMP180_GetCalibration+0x31c>)
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	3302      	adds	r3, #2
 800120e:	73bb      	strb	r3, [r7, #14]
	B1 	= (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	5cd3      	ldrb	r3, [r2, r3]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	3301      	adds	r3, #1
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	5ccb      	ldrb	r3, [r1, r3]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <BMP180_GetCalibration+0x320>)
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	3302      	adds	r3, #2
 8001230:	73bb      	strb	r3, [r7, #14]
	B2  = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	3301      	adds	r3, #1
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	5ccb      	ldrb	r3, [r1, r3]
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <BMP180_GetCalibration+0x324>)
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	3302      	adds	r3, #2
 8001252:	73bb      	strb	r3, [r7, #14]
	MB	= (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001254:	7bbb      	ldrb	r3, [r7, #14]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	3301      	adds	r3, #1
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <BMP180_GetCalibration+0x328>)
 800126e:	801a      	strh	r2, [r3, #0]
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	3302      	adds	r3, #2
 8001274:	73bb      	strb	r3, [r7, #14]
	MC 	= (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	5cd3      	ldrb	r3, [r2, r3]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21a      	sxth	r2, r3
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	3301      	adds	r3, #1
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	5ccb      	ldrb	r3, [r1, r3]
 8001288:	b21b      	sxth	r3, r3
 800128a:	4313      	orrs	r3, r2
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <BMP180_GetCalibration+0x32c>)
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	3302      	adds	r3, #2
 8001296:	73bb      	strb	r3, [r7, #14]
	MD  = (uint16_t)((bmp180_calibArray[i]<<8)|(bmp180_calibArray[i+1])); i+=2;
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7bbb      	ldrb	r3, [r7, #14]
 80012a4:	3301      	adds	r3, #1
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <BMP180_GetCalibration+0x330>)
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	7bbb      	ldrb	r3, [r7, #14]
 80012b6:	3302      	adds	r3, #2
 80012b8:	73bb      	strb	r3, [r7, #14]

	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80012ba:	2101      	movs	r1, #1
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <BMP180_GetCalibration+0x2e8>)
 80012be:	f7ff f9c9 	bl	8000654 <I2C_AcknowledgeConfig>

	BMP180_Read_UncompensatedTempValue();
 80012c2:	f000 f82d 	bl	8001320 <BMP180_Read_UncompensatedTempValue>
 80012c6:	46c5      	mov	sp, r8

}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012d2:	bf00      	nop
 80012d4:	40005400 	.word	0x40005400
 80012d8:	00030001 	.word	0x00030001
 80012dc:	00070082 	.word	0x00070082
 80012e0:	10000080 	.word	0x10000080
 80012e4:	00070084 	.word	0x00070084
 80012e8:	00030002 	.word	0x00030002
 80012ec:	10000040 	.word	0x10000040
 80012f0:	00030040 	.word	0x00030040
 80012f4:	20000034 	.word	0x20000034
 80012f8:	20000036 	.word	0x20000036
 80012fc:	20000038 	.word	0x20000038
 8001300:	2000003a 	.word	0x2000003a
 8001304:	2000003c 	.word	0x2000003c
 8001308:	2000003e 	.word	0x2000003e
 800130c:	20000040 	.word	0x20000040
 8001310:	20000042 	.word	0x20000042
 8001314:	20000044 	.word	0x20000044
 8001318:	20000046 	.word	0x20000046
 800131c:	20000048 	.word	0x20000048

08001320 <BMP180_Read_UncompensatedTempValue>:

void BMP180_Read_UncompensatedTempValue(void)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
    uint8_t ReadMemReg = 0xF6;
 8001326:	23f6      	movs	r3, #246	; 0xf6
 8001328:	737b      	strb	r3, [r7, #13]
	uint8_t data = 0x2E;
 800132a:	232e      	movs	r3, #46	; 0x2e
 800132c:	733b      	strb	r3, [r7, #12]
	uint8_t ReadMemRegVals[2];
	uint8_t worttenReg[] = {0xF4};
 800132e:	23f4      	movs	r3, #244	; 0xf4
 8001330:	713b      	strb	r3, [r7, #4]
	uint8_t i = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
	uint8_t DataSize = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	73bb      	strb	r3, [r7, #14]

	  //I2C_Cmd(I2C1,ENABLE);

	  //while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
	  I2C_GenerateSTART(I2C1,ENABLE);
 800133a:	2101      	movs	r1, #1
 800133c:	486f      	ldr	r0, [pc, #444]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800133e:	f7ff f92b 	bl	8000598 <I2C_GenerateSTART>

	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001342:	bf00      	nop
 8001344:	496e      	ldr	r1, [pc, #440]	; (8001500 <BMP180_Read_UncompensatedTempValue+0x1e0>)
 8001346:	486d      	ldr	r0, [pc, #436]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001348:	f7ff f9e2 	bl	8000710 <I2C_CheckEvent>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f8      	beq.n	8001344 <BMP180_Read_UncompensatedTempValue+0x24>
	  I2C_Send7bitAddress(I2C1, BMPAddrWrite, I2C_Direction_Transmitter);
 8001352:	2200      	movs	r2, #0
 8001354:	21ee      	movs	r1, #238	; 0xee
 8001356:	4869      	ldr	r0, [pc, #420]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001358:	f7ff f95e 	bl	8000618 <I2C_Send7bitAddress>
	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 800135c:	bf00      	nop
 800135e:	4969      	ldr	r1, [pc, #420]	; (8001504 <BMP180_Read_UncompensatedTempValue+0x1e4>)
 8001360:	4866      	ldr	r0, [pc, #408]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001362:	f7ff f9d5 	bl	8000710 <I2C_CheckEvent>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f8      	beq.n	800135e <BMP180_Read_UncompensatedTempValue+0x3e>

	  //I2C_Cmd(I2C1,ENABLE);

	  while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_TXE));
 800136c:	bf00      	nop
 800136e:	4966      	ldr	r1, [pc, #408]	; (8001508 <BMP180_Read_UncompensatedTempValue+0x1e8>)
 8001370:	4862      	ldr	r0, [pc, #392]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001372:	f7ff f9fd 	bl	8000770 <I2C_GetFlagStatus>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f8      	beq.n	800136e <BMP180_Read_UncompensatedTempValue+0x4e>
	  I2C_SendData(I2C1,0xF4);
 800137c:	21f4      	movs	r1, #244	; 0xf4
 800137e:	485f      	ldr	r0, [pc, #380]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001380:	f7ff f9a8 	bl	80006d4 <I2C_SendData>
	  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001384:	bf00      	nop
 8001386:	4961      	ldr	r1, [pc, #388]	; (800150c <BMP180_Read_UncompensatedTempValue+0x1ec>)
 8001388:	485c      	ldr	r0, [pc, #368]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800138a:	f7ff f9c1 	bl	8000710 <I2C_CheckEvent>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f8      	beq.n	8001386 <BMP180_Read_UncompensatedTempValue+0x66>

	  //while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
	  //I2C_Send7bitAddress(I2C1, BMPAddrWrite, I2C_Direction_Transmitter);
	  //while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)){}

	  while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_TXE));
 8001394:	bf00      	nop
 8001396:	495c      	ldr	r1, [pc, #368]	; (8001508 <BMP180_Read_UncompensatedTempValue+0x1e8>)
 8001398:	4858      	ldr	r0, [pc, #352]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800139a:	f7ff f9e9 	bl	8000770 <I2C_GetFlagStatus>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f8      	beq.n	8001396 <BMP180_Read_UncompensatedTempValue+0x76>
	  I2C_SendData(I2C1,data);
 80013a4:	7b3b      	ldrb	r3, [r7, #12]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4854      	ldr	r0, [pc, #336]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013aa:	f7ff f993 	bl	80006d4 <I2C_SendData>
	  //I2C1->DR = 0x2E;
	  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 80013ae:	bf00      	nop
 80013b0:	4956      	ldr	r1, [pc, #344]	; (800150c <BMP180_Read_UncompensatedTempValue+0x1ec>)
 80013b2:	4852      	ldr	r0, [pc, #328]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013b4:	f7ff f9ac 	bl	8000710 <I2C_CheckEvent>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f8      	beq.n	80013b0 <BMP180_Read_UncompensatedTempValue+0x90>

	  I2C_GenerateSTOP(I2C1,ENABLE);
 80013be:	2101      	movs	r1, #1
 80013c0:	484e      	ldr	r0, [pc, #312]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013c2:	f7ff f909 	bl	80005d8 <I2C_GenerateSTOP>

	  // wait for 5ms
	  delay();
 80013c6:	f7ff fd6f 	bl	8000ea8 <delay>


	  //I2C_Cmd(I2C1,ENABLE);


	  while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 80013ca:	bf00      	nop
 80013cc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80013d0:	484a      	ldr	r0, [pc, #296]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013d2:	f7ff f9cd 	bl	8000770 <I2C_GetFlagStatus>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f7      	bne.n	80013cc <BMP180_Read_UncompensatedTempValue+0xac>
	  I2C_GenerateSTART(I2C1,ENABLE);
 80013dc:	2101      	movs	r1, #1
 80013de:	4847      	ldr	r0, [pc, #284]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013e0:	f7ff f8da 	bl	8000598 <I2C_GenerateSTART>

	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 80013e4:	bf00      	nop
 80013e6:	4946      	ldr	r1, [pc, #280]	; (8001500 <BMP180_Read_UncompensatedTempValue+0x1e0>)
 80013e8:	4844      	ldr	r0, [pc, #272]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013ea:	f7ff f991 	bl	8000710 <I2C_CheckEvent>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f8      	beq.n	80013e6 <BMP180_Read_UncompensatedTempValue+0xc6>
	  I2C_Send7bitAddress(I2C1, BMPAddrWrite, I2C_Direction_Transmitter);
 80013f4:	2200      	movs	r2, #0
 80013f6:	21ee      	movs	r1, #238	; 0xee
 80013f8:	4840      	ldr	r0, [pc, #256]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80013fa:	f7ff f90d 	bl	8000618 <I2C_Send7bitAddress>
	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80013fe:	bf00      	nop
 8001400:	4940      	ldr	r1, [pc, #256]	; (8001504 <BMP180_Read_UncompensatedTempValue+0x1e4>)
 8001402:	483e      	ldr	r0, [pc, #248]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001404:	f7ff f984 	bl	8000710 <I2C_CheckEvent>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f8      	beq.n	8001400 <BMP180_Read_UncompensatedTempValue+0xe0>

	  I2C_Cmd(I2C1,ENABLE);
 800140e:	2101      	movs	r1, #1
 8001410:	483a      	ldr	r0, [pc, #232]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001412:	f7ff f8a1 	bl	8000558 <I2C_Cmd>
	  while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_TXE));
 8001416:	bf00      	nop
 8001418:	493b      	ldr	r1, [pc, #236]	; (8001508 <BMP180_Read_UncompensatedTempValue+0x1e8>)
 800141a:	4838      	ldr	r0, [pc, #224]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800141c:	f7ff f9a8 	bl	8000770 <I2C_GetFlagStatus>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f8      	beq.n	8001418 <BMP180_Read_UncompensatedTempValue+0xf8>
	  I2C_SendData(I2C1,ReadMemReg);
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	4619      	mov	r1, r3
 800142a:	4834      	ldr	r0, [pc, #208]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800142c:	f7ff f952 	bl	80006d4 <I2C_SendData>
	  while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001430:	bf00      	nop
 8001432:	4936      	ldr	r1, [pc, #216]	; (800150c <BMP180_Read_UncompensatedTempValue+0x1ec>)
 8001434:	4831      	ldr	r0, [pc, #196]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001436:	f7ff f96b 	bl	8000710 <I2C_CheckEvent>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f8      	beq.n	8001432 <BMP180_Read_UncompensatedTempValue+0x112>

	  ///////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////
	  I2C_GenerateSTART(I2C1,ENABLE);
 8001440:	2101      	movs	r1, #1
 8001442:	482e      	ldr	r0, [pc, #184]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001444:	f7ff f8a8 	bl	8000598 <I2C_GenerateSTART>

	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001448:	bf00      	nop
 800144a:	492d      	ldr	r1, [pc, #180]	; (8001500 <BMP180_Read_UncompensatedTempValue+0x1e0>)
 800144c:	482b      	ldr	r0, [pc, #172]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800144e:	f7ff f95f 	bl	8000710 <I2C_CheckEvent>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f8      	beq.n	800144a <BMP180_Read_UncompensatedTempValue+0x12a>
	  I2C_Send7bitAddress(I2C1, BMPAddrRead, I2C_Direction_Receiver);
 8001458:	2201      	movs	r2, #1
 800145a:	21ef      	movs	r1, #239	; 0xef
 800145c:	4827      	ldr	r0, [pc, #156]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800145e:	f7ff f8db 	bl	8000618 <I2C_Send7bitAddress>
	  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8001462:	bf00      	nop
 8001464:	492a      	ldr	r1, [pc, #168]	; (8001510 <BMP180_Read_UncompensatedTempValue+0x1f0>)
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001468:	f7ff f952 	bl	8000710 <I2C_CheckEvent>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f8      	beq.n	8001464 <BMP180_Read_UncompensatedTempValue+0x144>


	  while(DataSize)
 8001472:	e02a      	b.n	80014ca <BMP180_Read_UncompensatedTempValue+0x1aa>
	  {
		if(DataSize == 1)
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d107      	bne.n	800148a <BMP180_Read_UncompensatedTempValue+0x16a>
		{
		  I2C_AcknowledgeConfig(I2C1,DISABLE);
 800147a:	2100      	movs	r1, #0
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800147e:	f7ff f8e9 	bl	8000654 <I2C_AcknowledgeConfig>
		  I2C_GenerateSTOP(I2C1,ENABLE);
 8001482:	2101      	movs	r1, #1
 8001484:	481d      	ldr	r0, [pc, #116]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001486:	f7ff f8a7 	bl	80005d8 <I2C_GenerateSTOP>
		}

		 while(!I2C_GetFlagStatus(I2C1,I2C_FLAG_RXNE));
 800148a:	bf00      	nop
 800148c:	4921      	ldr	r1, [pc, #132]	; (8001514 <BMP180_Read_UncompensatedTempValue+0x1f4>)
 800148e:	481b      	ldr	r0, [pc, #108]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 8001490:	f7ff f96e 	bl	8000770 <I2C_GetFlagStatus>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f8      	beq.n	800148c <BMP180_Read_UncompensatedTempValue+0x16c>
		 if (I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
 800149a:	491f      	ldr	r1, [pc, #124]	; (8001518 <BMP180_Read_UncompensatedTempValue+0x1f8>)
 800149c:	4817      	ldr	r0, [pc, #92]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 800149e:	f7ff f937 	bl	8000710 <I2C_CheckEvent>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00d      	beq.n	80014c4 <BMP180_Read_UncompensatedTempValue+0x1a4>
		 {
			 ReadMemRegVals[i] = I2C_ReceiveData(I2C1);
 80014a8:	7bfc      	ldrb	r4, [r7, #15]
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80014ac:	f7ff f922 	bl	80006f4 <I2C_ReceiveData>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4423      	add	r3, r4
 80014ba:	f803 2c08 	strb.w	r2, [r3, #-8]
			 ++i;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	3301      	adds	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
		 }
		 DataSize--;
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	73bb      	strb	r3, [r7, #14]
	  while(DataSize)
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1d1      	bne.n	8001474 <BMP180_Read_UncompensatedTempValue+0x154>
	  }

	  UT = (uint16_t)((ReadMemRegVals[0]<<8) | (ReadMemRegVals[1]));
 80014d0:	7a3b      	ldrb	r3, [r7, #8]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
 80014d6:	7a7b      	ldrb	r3, [r7, #9]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21b      	sxth	r3, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <BMP180_Read_UncompensatedTempValue+0x1fc>)
 80014e4:	601a      	str	r2, [r3, #0]

	  I2C_AcknowledgeConfig(I2C1,ENABLE);
 80014e6:	2101      	movs	r1, #1
 80014e8:	4804      	ldr	r0, [pc, #16]	; (80014fc <BMP180_Read_UncompensatedTempValue+0x1dc>)
 80014ea:	f7ff f8b3 	bl	8000654 <I2C_AcknowledgeConfig>

	  BMP180_TemperatureValue();
 80014ee:	f000 f817 	bl	8001520 <BMP180_TemperatureValue>

}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40005400 	.word	0x40005400
 8001500:	00030001 	.word	0x00030001
 8001504:	00070082 	.word	0x00070082
 8001508:	10000080 	.word	0x10000080
 800150c:	00070084 	.word	0x00070084
 8001510:	00030002 	.word	0x00030002
 8001514:	10000040 	.word	0x10000040
 8001518:	00030040 	.word	0x00030040
 800151c:	2000004c 	.word	0x2000004c

08001520 <BMP180_TemperatureValue>:


float BMP180_TemperatureValue(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

	X1 = ((UT-AC6)*AC5)/32768;
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <BMP180_TemperatureValue+0x98>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a24      	ldr	r2, [pc, #144]	; (80015bc <BMP180_TemperatureValue+0x9c>)
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <BMP180_TemperatureValue+0xa0>)
 8001530:	8812      	ldrh	r2, [r2, #0]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	da02      	bge.n	8001540 <BMP180_TemperatureValue+0x20>
 800153a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800153e:	337f      	adds	r3, #127	; 0x7f
 8001540:	13db      	asrs	r3, r3, #15
 8001542:	461a      	mov	r2, r3
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <BMP180_TemperatureValue+0xa4>)
 8001546:	601a      	str	r2, [r3, #0]
	X2 = ((MC*2048)/(X1+MD));
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <BMP180_TemperatureValue+0xa8>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	02da      	lsls	r2, r3, #11
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <BMP180_TemperatureValue+0xac>)
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	4619      	mov	r1, r3
 8001558:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <BMP180_TemperatureValue+0xa4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	440b      	add	r3, r1
 800155e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <BMP180_TemperatureValue+0xb0>)
 8001564:	6013      	str	r3, [r2, #0]
	B5 = (X1+X2);
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <BMP180_TemperatureValue+0xa4>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <BMP180_TemperatureValue+0xb0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <BMP180_TemperatureValue+0xb4>)
 8001572:	6013      	str	r3, [r2, #0]
	T =	 ((B5+8)/16);
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <BMP180_TemperatureValue+0xb4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3308      	adds	r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <BMP180_TemperatureValue+0x60>
 800157e:	330f      	adds	r3, #15
 8001580:	111b      	asrs	r3, r3, #4
 8001582:	461a      	mov	r2, r3
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <BMP180_TemperatureValue+0xb8>)
 8001586:	601a      	str	r2, [r3, #0]

	Temperature =(float)T/10.0;
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <BMP180_TemperatureValue+0xb8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001594:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <BMP180_TemperatureValue+0xbc>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	return Temperature;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <BMP180_TemperatureValue+0xbc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	ee07 3a90 	vmov	s15, r3
}
 80015aa:	eeb0 0a67 	vmov.f32	s0, s15
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000004c 	.word	0x2000004c
 80015bc:	2000003e 	.word	0x2000003e
 80015c0:	2000003c 	.word	0x2000003c
 80015c4:	20000050 	.word	0x20000050
 80015c8:	20000046 	.word	0x20000046
 80015cc:	20000048 	.word	0x20000048
 80015d0:	20000054 	.word	0x20000054
 80015d4:	20000058 	.word	0x20000058
 80015d8:	2000005c 	.word	0x2000005c
 80015dc:	20000060 	.word	0x20000060

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
  ldr  r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001600:	f842 3b04 	str.w	r3, [r2], #4

08001604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160a:	f000 f841 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f000 f8f1 	bl	80017f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff fbc5 	bl	8000da0 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800161c:	0800186c 	.word	0x0800186c
  ldr  r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001624:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8001628:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800162c:	20000064 	.word	0x20000064

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>

08001632 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001644:	e7fe      	b.n	8001644 <HardFault_Handler+0x4>

08001646 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800164a:	e7fe      	b.n	800164a <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001650:	e7fe      	b.n	8001650 <BusFault_Handler+0x4>

08001652 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001656:	e7fe      	b.n	8001656 <UsageFault_Handler+0x4>

08001658 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4a16      	ldr	r2, [pc, #88]	; (80016f0 <SystemInit+0x60>)
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <SystemInit+0x60>)
 8001698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016a4:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <SystemInit+0x64>)
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <SystemInit+0x64>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <SystemInit+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80016b6:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <SystemInit+0x64>)
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <SystemInit+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <SystemInit+0x64>)
 80016c8:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <SystemInit+0x68>)
 80016ca:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016cc:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <SystemInit+0x64>)
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <SystemInit+0x64>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80016de:	f000 f80d 	bl	80016fc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016e2:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <SystemInit+0x60>)
 80016e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e8:	609a      	str	r2, [r3, #8]
#endif
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	24003010 	.word	0x24003010

080016fc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800170a:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <SetSysClock+0xe8>)
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <SetSysClock+0xe8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <SetSysClock+0xe8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3301      	adds	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <SetSysClock+0x38>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001732:	d1f0      	bne.n	8001716 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <SetSysClock+0xe8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001740:	2301      	movs	r3, #1
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	e001      	b.n	800174a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d142      	bne.n	80017d6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <SetSysClock+0xe8>)
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <SetSysClock+0xe8>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <SetSysClock+0xec>)
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <SetSysClock+0xec>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001766:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <SetSysClock+0xe8>)
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <SetSysClock+0xe8>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <SetSysClock+0xe8>)
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <SetSysClock+0xe8>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <SetSysClock+0xe8>)
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <SetSysClock+0xe8>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001786:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <SetSysClock+0xe8>)
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <SetSysClock+0xf0>)
 800178c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <SetSysClock+0xe8>)
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <SetSysClock+0xe8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001798:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800179a:	bf00      	nop
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <SetSysClock+0xe8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f9      	beq.n	800179c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <SetSysClock+0xf4>)
 80017aa:	f240 7205 	movw	r2, #1797	; 0x705
 80017ae:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80017b0:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <SetSysClock+0xe8>)
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <SetSysClock+0xe8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80017bc:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <SetSysClock+0xe8>)
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <SetSysClock+0xe8>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80017c8:	bf00      	nop
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SetSysClock+0xe8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d1f9      	bne.n	80017ca <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000
 80017ec:	07405419 	.word	0x07405419
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <__libc_init_array>:
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	4e0d      	ldr	r6, [pc, #52]	; (800182c <__libc_init_array+0x38>)
 80017f8:	4c0d      	ldr	r4, [pc, #52]	; (8001830 <__libc_init_array+0x3c>)
 80017fa:	1ba4      	subs	r4, r4, r6
 80017fc:	10a4      	asrs	r4, r4, #2
 80017fe:	2500      	movs	r5, #0
 8001800:	42a5      	cmp	r5, r4
 8001802:	d109      	bne.n	8001818 <__libc_init_array+0x24>
 8001804:	4e0b      	ldr	r6, [pc, #44]	; (8001834 <__libc_init_array+0x40>)
 8001806:	4c0c      	ldr	r4, [pc, #48]	; (8001838 <__libc_init_array+0x44>)
 8001808:	f000 f820 	bl	800184c <_init>
 800180c:	1ba4      	subs	r4, r4, r6
 800180e:	10a4      	asrs	r4, r4, #2
 8001810:	2500      	movs	r5, #0
 8001812:	42a5      	cmp	r5, r4
 8001814:	d105      	bne.n	8001822 <__libc_init_array+0x2e>
 8001816:	bd70      	pop	{r4, r5, r6, pc}
 8001818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800181c:	4798      	blx	r3
 800181e:	3501      	adds	r5, #1
 8001820:	e7ee      	b.n	8001800 <__libc_init_array+0xc>
 8001822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001826:	4798      	blx	r3
 8001828:	3501      	adds	r5, #1
 800182a:	e7f2      	b.n	8001812 <__libc_init_array+0x1e>
 800182c:	08001864 	.word	0x08001864
 8001830:	08001864 	.word	0x08001864
 8001834:	08001864 	.word	0x08001864
 8001838:	08001868 	.word	0x08001868

0800183c <memset>:
 800183c:	4402      	add	r2, r0
 800183e:	4603      	mov	r3, r0
 8001840:	4293      	cmp	r3, r2
 8001842:	d100      	bne.n	8001846 <memset+0xa>
 8001844:	4770      	bx	lr
 8001846:	f803 1b01 	strb.w	r1, [r3], #1
 800184a:	e7f9      	b.n	8001840 <memset+0x4>

0800184c <_init>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr

08001858 <_fini>:
 8001858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185a:	bf00      	nop
 800185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185e:	bc08      	pop	{r3}
 8001860:	469e      	mov	lr, r3
 8001862:	4770      	bx	lr

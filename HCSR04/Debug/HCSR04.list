
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ee0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001068  08001068  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001068  08001068  00011068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800106c  0800106c  0001106c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001070  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000038  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000003c  2000003c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005bca  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000fac  00000000  00000000  00025bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000828  00000000  00000000  00026bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000780  00000000  00000000  000273d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000028a9  00000000  00000000  00027b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b3f  00000000  00000000  0002a401  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002cf40  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002290  00000000  00000000  0002cfbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f24c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001050 	.word	0x08001050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001050 	.word	0x08001050

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800037c:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <EXTI_GetFlagStatus+0x30>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	d002      	beq.n	800038e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8000388:	2301      	movs	r3, #1
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e001      	b.n	8000392 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000392:	7bfb      	ldrb	r3, [r7, #15]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40013c00 	.word	0x40013c00

080003a4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80003ac:	2300      	movs	r3, #0
 80003ae:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <EXTI_GetITStatus+0x44>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4013      	ands	r3, r2
 80003bc:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <EXTI_GetITStatus+0x44>)
 80003c0:	695a      	ldr	r2, [r3, #20]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4013      	ands	r3, r2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d005      	beq.n	80003d6 <EXTI_GetITStatus+0x32>
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d002      	beq.n	80003d6 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80003d0:	2301      	movs	r3, #1
 80003d2:	73fb      	strb	r3, [r7, #15]
 80003d4:	e001      	b.n	80003da <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003d6:	2300      	movs	r3, #0
 80003d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003da:	7bfb      	ldrb	r3, [r7, #15]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40013c00 	.word	0x40013c00

080003ec <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <EXTI_ClearITPendingBit+0x1c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6153      	str	r3, [r2, #20]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40013c00 	.word	0x40013c00

0800040c <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <FLASH_SetLatency+0x1c>)
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	701a      	strb	r2, [r3, #0]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40023c00 	.word	0x40023c00

0800042c <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d006      	beq.n	800044a <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800043c:	4a09      	ldr	r2, [pc, #36]	; (8000464 <FLASH_PrefetchBufferCmd+0x38>)
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <FLASH_PrefetchBufferCmd+0x38>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000446:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 8000448:	e005      	b.n	8000456 <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800044a:	4a06      	ldr	r2, [pc, #24]	; (8000464 <FLASH_PrefetchBufferCmd+0x38>)
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <FLASH_PrefetchBufferCmd+0x38>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000454:	6013      	str	r3, [r2, #0]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40023c00 	.word	0x40023c00

08000468 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000468:	b480      	push	{r7}
 800046a:	b087      	sub	sp, #28
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]
 8000482:	e076      	b.n	8000572 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000484:	2201      	movs	r2, #1
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	fa02 f303 	lsl.w	r3, r2, r3
 800048c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	4013      	ands	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	429a      	cmp	r2, r3
 800049e:	d165      	bne.n	800056c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2103      	movs	r1, #3
 80004aa:	fa01 f303 	lsl.w	r3, r1, r3
 80004ae:	43db      	mvns	r3, r3
 80004b0:	401a      	ands	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	4619      	mov	r1, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	431a      	orrs	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d003      	beq.n	80004de <GPIO_Init+0x76>
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d12e      	bne.n	800053c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	2103      	movs	r1, #3
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	43db      	mvns	r3, r3
 80004ee:	401a      	ands	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	4619      	mov	r1, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	fa01 f303 	lsl.w	r3, r1, r3
 8000506:	431a      	orrs	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	b29b      	uxth	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	2301      	movs	r3, #1
 8000518:	408b      	lsls	r3, r1
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	7992      	ldrb	r2, [r2, #6]
 800052a:	4611      	mov	r1, r2
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	b292      	uxth	r2, r2
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	b292      	uxth	r2, r2
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68da      	ldr	r2, [r3, #12]
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	b29b      	uxth	r3, r3
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2103      	movs	r1, #3
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	401a      	ands	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	79db      	ldrb	r3, [r3, #7]
 800055c:	4619      	mov	r1, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d985      	bls.n	8000484 <GPIO_Init+0x1c>
    }
  }
}
 8000578:	bf00      	nop
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	887a      	ldrh	r2, [r7, #2]
 8000594:	831a      	strh	r2, [r3, #24]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	887a      	ldrh	r2, [r7, #2]
 80005b2:	835a      	strh	r2, [r3, #26]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <RCC_DeInit+0x50>)
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <RCC_DeInit+0x50>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <RCC_DeInit+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <RCC_DeInit+0x50>)
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <RCC_DeInit+0x50>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80005e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <RCC_DeInit+0x50>)
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <RCC_DeInit+0x54>)
 80005ea:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <RCC_DeInit+0x50>)
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <RCC_DeInit+0x58>)
 80005f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <RCC_DeInit+0x50>)
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <RCC_DeInit+0x50>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <RCC_DeInit+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40023800 	.word	0x40023800
 8000614:	24003010 	.word	0x24003010
 8000618:	20003000 	.word	0x20003000

0800061c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <RCC_HSEConfig+0x24>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <RCC_HSEConfig+0x24>)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	7013      	strb	r3, [r2, #0]
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023802 	.word	0x40023802

08000644 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000656:	2031      	movs	r0, #49	; 0x31
 8000658:	f000 f92e 	bl	80008b8 <RCC_GetFlagStatus>
 800065c:	4603      	mov	r3, r0
 800065e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800066c:	d002      	beq.n	8000674 <RCC_WaitForHSEStartUp+0x30>
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d0f0      	beq.n	8000656 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000674:	2031      	movs	r0, #49	; 0x31
 8000676:	f000 f91f 	bl	80008b8 <RCC_GetFlagStatus>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000680:	2301      	movs	r3, #1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	e001      	b.n	800068a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800068a:	79fb      	ldrb	r3, [r7, #7]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80006a2:	490b      	ldr	r1, [pc, #44]	; (80006d0 <RCC_PLLConfig+0x3c>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	019a      	lsls	r2, r3, #6
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	085b      	lsrs	r3, r3, #1
 80006b0:	3b01      	subs	r3, #1
 80006b2:	041b      	lsls	r3, r3, #16
 80006b4:	431a      	orrs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80006be:	4313      	orrs	r3, r2
 80006c0:	604b      	str	r3, [r1, #4]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <RCC_PLLCmd+0x1c>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	42470060 	.word	0x42470060

080006f4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <RCC_SYSCLKConfig+0x34>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f023 0303 	bic.w	r3, r3, #3
 800070c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4313      	orrs	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <RCC_SYSCLKConfig+0x34>)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6093      	str	r3, [r2, #8]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40023800 	.word	0x40023800

0800072c <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <RCC_GetSYSCLKSource+0x1c>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f003 030c 	and.w	r3, r3, #12
 800073a:	b2db      	uxtb	r3, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <RCC_HCLKConfig+0x34>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000764:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <RCC_HCLKConfig+0x34>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	6093      	str	r3, [r2, #8]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40023800 	.word	0x40023800

08000784 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <RCC_PCLK1Config+0x34>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800079c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <RCC_PCLK1Config+0x34>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6093      	str	r3, [r2, #8]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40023800 	.word	0x40023800

080007bc <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <RCC_PCLK2Config+0x38>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	4313      	orrs	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <RCC_PCLK2Config+0x38>)
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6093      	str	r3, [r2, #8]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <RCC_AHB1PeriphClockCmd+0x3c>)
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <RCC_AHB1PeriphClockCmd+0x3c>)
 800080e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000816:	e006      	b.n	8000826 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000818:	4906      	ldr	r1, [pc, #24]	; (8000834 <RCC_AHB1PeriphClockCmd+0x3c>)
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <RCC_AHB1PeriphClockCmd+0x3c>)
 800081c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	43db      	mvns	r3, r3
 8000822:	4013      	ands	r3, r2
 8000824:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000844:	78fb      	ldrb	r3, [r7, #3]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800084a:	490a      	ldr	r1, [pc, #40]	; (8000874 <RCC_APB1PeriphClockCmd+0x3c>)
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <RCC_APB1PeriphClockCmd+0x3c>)
 800084e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000856:	e006      	b.n	8000866 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <RCC_APB1PeriphClockCmd+0x3c>)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <RCC_APB1PeriphClockCmd+0x3c>)
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	43db      	mvns	r3, r3
 8000862:	4013      	ands	r3, r2
 8000864:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d006      	beq.n	8000898 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800088a:	490a      	ldr	r1, [pc, #40]	; (80008b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800088e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4313      	orrs	r3, r2
 8000894:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000896:	e006      	b.n	80008a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <RCC_APB2PeriphClockCmd+0x3c>)
 800089c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	43db      	mvns	r3, r3
 80008a2:	4013      	ands	r3, r2
 80008a4:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	095b      	lsrs	r3, r3, #5
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d103      	bne.n	80008e4 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <RCC_GetFlagStatus+0x70>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e009      	b.n	80008f8 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d103      	bne.n	80008f2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80008ea:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <RCC_GetFlagStatus+0x70>)
 80008ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e002      	b.n	80008f8 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <RCC_GetFlagStatus+0x70>)
 80008f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008f6:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000910:	2301      	movs	r3, #1
 8000912:	74fb      	strb	r3, [r7, #19]
 8000914:	e001      	b.n	800091a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800091a:	7cfb      	ldrb	r3, [r7, #19]
}
 800091c:	4618      	mov	r0, r3
 800091e:	371c      	adds	r7, #28
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40023800 	.word	0x40023800

0800092c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800092c:	b490      	push	{r4, r7}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	460a      	mov	r2, r1
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	f003 0303 	and.w	r3, r3, #3
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	220f      	movs	r2, #15
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000950:	4916      	ldr	r1, [pc, #88]	; (80009ac <SYSCFG_EXTILineConfig+0x80>)
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	089b      	lsrs	r3, r3, #2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <SYSCFG_EXTILineConfig+0x80>)
 800095c:	79bb      	ldrb	r3, [r7, #6]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	3302      	adds	r3, #2
 8000964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	43db      	mvns	r3, r3
 800096c:	401a      	ands	r2, r3
 800096e:	1c83      	adds	r3, r0, #2
 8000970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <SYSCFG_EXTILineConfig+0x80>)
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	461c      	mov	r4, r3
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <SYSCFG_EXTILineConfig+0x80>)
 8000980:	79bb      	ldrb	r3, [r7, #6]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	3302      	adds	r3, #2
 8000988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098c:	79f9      	ldrb	r1, [r7, #7]
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	431a      	orrs	r2, r3
 800099c:	1ca3      	adds	r3, r4, #2
 800099e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc90      	pop	{r4, r7}
 80009aa:	4770      	bx	lr
 80009ac:	40013800 	.word	0x40013800

080009b0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a29      	ldr	r2, [pc, #164]	; (8000a6c <TIM_TimeBaseInit+0xbc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d013      	beq.n	80009f4 <TIM_TimeBaseInit+0x44>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a28      	ldr	r2, [pc, #160]	; (8000a70 <TIM_TimeBaseInit+0xc0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d00f      	beq.n	80009f4 <TIM_TimeBaseInit+0x44>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009da:	d00b      	beq.n	80009f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <TIM_TimeBaseInit+0xc4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d007      	beq.n	80009f4 <TIM_TimeBaseInit+0x44>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a24      	ldr	r2, [pc, #144]	; (8000a78 <TIM_TimeBaseInit+0xc8>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d003      	beq.n	80009f4 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <TIM_TimeBaseInit+0xcc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d108      	bne.n	8000a06 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80009f4:	89fb      	ldrh	r3, [r7, #14]
 80009f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009fa:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	885a      	ldrh	r2, [r3, #2]
 8000a00:	89fb      	ldrh	r3, [r7, #14]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <TIM_TimeBaseInit+0xd0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00c      	beq.n	8000a28 <TIM_TimeBaseInit+0x78>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <TIM_TimeBaseInit+0xd4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d008      	beq.n	8000a28 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000a16:	89fb      	ldrh	r3, [r7, #14]
 8000a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a1c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	891a      	ldrh	r2, [r3, #8]
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	89fa      	ldrh	r2, [r7, #14]
 8000a2c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	881a      	ldrh	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <TIM_TimeBaseInit+0xbc>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d003      	beq.n	8000a4e <TIM_TimeBaseInit+0x9e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <TIM_TimeBaseInit+0xc0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d104      	bne.n	8000a58 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	7a9b      	ldrb	r3, [r3, #10]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	829a      	strh	r2, [r3, #20]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40010000 	.word	0x40010000
 8000a70:	40010400 	.word	0x40010400
 8000a74:	40000400 	.word	0x40000400
 8000a78:	40000800 	.word	0x40000800
 8000a7c:	40000c00 	.word	0x40000c00
 8000a80:	40001000 	.word	0x40001000
 8000a84:	40001400 	.word	0x40001400

08000a88 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa4:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8000aa6:	89fa      	ldrh	r2, [r7, #14]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	89fa      	ldrh	r2, [r7, #14]
 8000ab2:	801a      	strh	r2, [r3, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000b16:	e007      	b.n	8000b28 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f023 0301 	bic.w	r3, r3, #1
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	801a      	strh	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <main>:




int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	startConfig();
 8000b38:	f000 f80a 	bl	8000b50 <startConfig>
  while(1)
  {
	  if(__isDeviceReady == true)
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <main+0x18>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0fb      	beq.n	8000b3c <main+0x8>
		  startDevice();
 8000b44:	f000 f8da 	bl	8000cfc <startDevice>
	  if(__isDeviceReady == true)
 8000b48:	e7f8      	b.n	8000b3c <main+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	20000000 	.word	0x20000000

08000b50 <startConfig>:




static void startConfig()
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	RCC_DeInit();
 8000b54:	f7ff fd34 	bl	80005c0 <RCC_DeInit>
	RCC_Config();  //  -->> 84Mhz (tim and sysclk)
 8000b58:	f000 f88d 	bl	8000c76 <RCC_Config>
	gpioConfig();
 8000b5c:	f000 f806 	bl	8000b6c <gpioConfig>
	interruptConfig();
 8000b60:	f000 f834 	bl	8000bcc <interruptConfig>
	TimConfig();
 8000b64:	f000 f85e 	bl	8000c24 <TimConfig>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <gpioConfig>:

static void gpioConfig()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000b72:	2101      	movs	r1, #1
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fe3f 	bl	80007f8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2208      	movs	r2, #8
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fa5d 	bl	8001040 <memset>

	//interrupt gpioa pin0

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_IN;
 8000b86:	2300      	movs	r3, #0
 8000b88:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000b92:	2302      	movs	r3, #2
 8000b94:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <gpioConfig+0x5c>)
 8000b9c:	f7ff fc64 	bl	8000468 <GPIO_Init>

	GPIO_Init(GPIOA,&GPIO_InitStruct);*/

	//set trig gpioa pin2

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000bac:	2302      	movs	r3, #2
 8000bae:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <gpioConfig+0x5c>)
 8000bba:	f7ff fc55 	bl	8000468 <GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020000 	.word	0x40020000

08000bcc <interruptConfig>:

static void interruptConfig()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
	EXTI_InitTypeDef extiInit = {0};
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
	NVIC_InitTypeDef NVIC_Initial={0};
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8000be0:	2101      	movs	r1, #1
 8000be2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be6:	f7ff fe47 	bl	8000878 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe9d 	bl	800092c <SYSCFG_EXTILineConfig>

	extiInit.EXTI_Line = EXTI_Line0;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
	extiInit.EXTI_Mode = EXTI_Mode_Interrupt;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	733b      	strb	r3, [r7, #12]
	extiInit.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000bfa:	2310      	movs	r3, #16
 8000bfc:	737b      	strb	r3, [r7, #13]
	extiInit.EXTI_LineCmd = ENABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73bb      	strb	r3, [r7, #14]

	EXTI_Init(&extiInit);
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fb40 	bl	800028c <EXTI_Init>

	NVIC_Initial.NVIC_IRQChannel = EXTI0_IRQn;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	713b      	strb	r3, [r7, #4]
	NVIC_Initial.NVIC_IRQChannelCmd = ENABLE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_Initial);
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fad6 	bl	80001c8 <NVIC_Init>

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <TimConfig>:

static void TimConfig()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f7ff fe03 	bl	8000838 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef tim_init = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]

	tim_init.TIM_ClockDivision = TIM_CKD_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	81bb      	strh	r3, [r7, #12]
	tim_init.TIM_CounterMode = TIM_CounterMode_Up;
 8000c40:	2300      	movs	r3, #0
 8000c42:	80fb      	strh	r3, [r7, #6]
	tim_init.TIM_Period = 0xFFFFFFFF-1;
 8000c44:	f06f 0301 	mvn.w	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
	tim_init.TIM_Prescaler = 83 ;
 8000c4a:	2353      	movs	r3, #83	; 0x53
 8000c4c:	80bb      	strh	r3, [r7, #4]
	//tim_init.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM2,&tim_init);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c56:	f7ff feab 	bl	80009b0 <TIM_TimeBaseInit>

	TIM_CounterModeConfig(TIM2,TIM_CounterMode_Up);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c60:	f7ff ff12 	bl	8000a88 <TIM_CounterModeConfig>

	TIM_Cmd(TIM2,ENABLE);
 8000c64:	2101      	movs	r1, #1
 8000c66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c6a:	f7ff ff43 	bl	8000af4 <TIM_Cmd>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <RCC_Config>:

static void RCC_Config()
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af02      	add	r7, sp, #8

	    RCC_HSEConfig(RCC_HSE_ON);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fccd 	bl	800061c <RCC_HSEConfig>
		FLASH_PrefetchBufferCmd(ENABLE);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fbd2 	bl	800042c <FLASH_PrefetchBufferCmd>
		//FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
		FLASH_SetLatency(FLASH_Latency_5);
 8000c88:	2005      	movs	r0, #5
 8000c8a:	f7ff fbbf 	bl	800040c <FLASH_SetLatency>
		while(RCC_WaitForHSEStartUp() != SUCCESS);
 8000c8e:	bf00      	nop
 8000c90:	f7ff fcd8 	bl	8000644 <RCC_WaitForHSEStartUp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d1fa      	bne.n	8000c90 <RCC_Config+0x1a>
		while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) != SET);
 8000c9a:	bf00      	nop
 8000c9c:	2031      	movs	r0, #49	; 0x31
 8000c9e:	f7ff fe0b 	bl	80008b8 <RCC_GetFlagStatus>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d1f9      	bne.n	8000c9c <RCC_Config+0x26>


		RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fd4f 	bl	800074c <RCC_HCLKConfig>
		RCC_PCLK1Config(RCC_HCLK_Div2);
 8000cae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cb2:	f7ff fd67 	bl	8000784 <RCC_PCLK1Config>
		RCC_PCLK2Config(RCC_HCLK_Div2);
 8000cb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000cba:	f7ff fd7f 	bl	80007bc <RCC_PCLK2Config>
		RCC_PLLConfig(RCC_PLLSource_HSE,8,168,2,4);
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	22a8      	movs	r2, #168	; 0xa8
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000ccc:	f7ff fce2 	bl	8000694 <RCC_PLLConfig>


		RCC_PLLCmd(ENABLE);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fcff 	bl	80006d4 <RCC_PLLCmd>

		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY != SET));
 8000cd6:	bf00      	nop
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fded 	bl	80008b8 <RCC_GetFlagStatus>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f9      	bne.n	8000cd8 <RCC_Config+0x62>

		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fd05 	bl	80006f4 <RCC_SYSCLKConfig>

		while(RCC_GetSYSCLKSource() != is_PLL_Clk);
 8000cea:	bf00      	nop
 8000cec:	f7ff fd1e 	bl	800072c <RCC_GetSYSCLKSource>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d1fa      	bne.n	8000cec <RCC_Config+0x76>
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <startDevice>:

static void startDevice()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	__isDeviceReady = false;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <startDevice+0x24>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	701a      	strb	r2, [r3, #0]
	GPIO_SetBits(GPIOA,GPIO_Pin_2);
 8000d06:	2104      	movs	r1, #4
 8000d08:	4806      	ldr	r0, [pc, #24]	; (8000d24 <startDevice+0x28>)
 8000d0a:	f7ff fc3b 	bl	8000584 <GPIO_SetBits>
	delay();
 8000d0e:	f000 f843 	bl	8000d98 <delay>
	GPIO_ResetBits(GPIOA,GPIO_Pin_2);;
 8000d12:	2104      	movs	r1, #4
 8000d14:	4803      	ldr	r0, [pc, #12]	; (8000d24 <startDevice+0x28>)
 8000d16:	f7ff fc44 	bl	80005a2 <GPIO_ResetBits>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000
 8000d24:	40020000 	.word	0x40020000

08000d28 <MeasureDistance>:

static void MeasureDistance()
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if(__isMeasurementReady != true)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MeasureDistance+0x54>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d008      	beq.n	8000d4c <MeasureDistance+0x24>
	{
		__isMeasurementReady = true;
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MeasureDistance+0x54>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
		TIM_SetCounter(TIM2,0);
 8000d40:	2100      	movs	r1, #0
 8000d42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d46:	f7ff febb 	bl	8000ac0 <TIM_SetCounter>
		__isMeasurementReady = false;
		__isDeviceReady = true;
		//HCSR04_CallbackEvents();

	}
}
 8000d4a:	e014      	b.n	8000d76 <MeasureDistance+0x4e>
		Distance = (float) TIM_GetCounter(TIM2)/58;
 8000d4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d50:	f7ff fec4 	bl	8000adc <TIM_GetCounter>
 8000d54:	ee07 0a90 	vmov	s15, r0
 8000d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d5c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000d80 <MeasureDistance+0x58>
 8000d60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MeasureDistance+0x5c>)
 8000d66:	edc3 7a00 	vstr	s15, [r3]
		__isMeasurementReady = false;
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <MeasureDistance+0x54>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
		__isDeviceReady = true;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MeasureDistance+0x60>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000020 	.word	0x20000020
 8000d80:	42680000 	.word	0x42680000
 8000d84:	20000024 	.word	0x20000024
 8000d88:	20000000 	.word	0x20000000

08000d8c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	IRQ_Handler();
 8000d90:	f000 f813 	bl	8000dba <IRQ_Handler>
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <delay>:
{
	//TODO something
}

static void delay()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	TIM_SetCounter(TIM2,0);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000da2:	f7ff fe8d 	bl	8000ac0 <TIM_SetCounter>
	while(TIM_GetCounter(TIM2)<15);
 8000da6:	bf00      	nop
 8000da8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dac:	f7ff fe96 	bl	8000adc <TIM_GetCounter>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b0e      	cmp	r3, #14
 8000db4:	d9f8      	bls.n	8000da8 <delay+0x10>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}

08000dba <IRQ_Handler>:

static void IRQ_Handler()
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0))
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff faf0 	bl	80003a4 <EXTI_GetITStatus>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <IRQ_Handler+0x20>
	{
		if(EXTI_GetFlagStatus(EXTI_Line0))
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fad0 	bl	8000370 <EXTI_GetFlagStatus>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <IRQ_Handler+0x20>
		{
			MeasureDistance();
 8000dd6:	f7ff ffa7 	bl	8000d28 <MeasureDistance>
		}
	}
	EXTI_ClearITPendingBit(EXTI_Line0);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fb06 	bl	80003ec <EXTI_ClearITPendingBit>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000de8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dea:	e003      	b.n	8000df4 <LoopCopyDataInit>

08000dec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000df0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000df2:	3104      	adds	r1, #4

08000df4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000df8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dfc:	d3f6      	bcc.n	8000dec <CopyDataInit>
  ldr  r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e00:	e002      	b.n	8000e08 <LoopFillZerobss>

08000e02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e04:	f842 3b04 	str.w	r3, [r2], #4

08000e08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e0c:	d3f9      	bcc.n	8000e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0e:	f000 f841 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f000 f8f1 	bl	8000ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fe8d 	bl	8000b34 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e20:	08001070 	.word	0x08001070
  ldr  r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e28:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000e2c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000e30:	2000003c 	.word	0x2000003c

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>

08000e36 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <HardFault_Handler+0x4>

08000e4a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <BusFault_Handler+0x4>

08000e56 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <UsageFault_Handler+0x4>

08000e5c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <SystemInit+0x60>)
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <SystemInit+0x60>)
 8000e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <SystemInit+0x64>)
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <SystemInit+0x64>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eba:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <SystemInit+0x64>)
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <SystemInit+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <SystemInit+0x64>)
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <SystemInit+0x68>)
 8000ece:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ed0:	4a09      	ldr	r2, [pc, #36]	; (8000ef8 <SystemInit+0x64>)
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <SystemInit+0x64>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000ee2:	f000 f80d 	bl	8000f00 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee6:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <SystemInit+0x60>)
 8000ee8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eec:	609a      	str	r2, [r3, #8]
#endif
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	24003010 	.word	0x24003010

08000f00 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <SetSysClock+0xe8>)
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <SetSysClock+0xe8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <SetSysClock+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3301      	adds	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <SetSysClock+0x38>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000f36:	d1f0      	bne.n	8000f1a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000f38:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <SetSysClock+0xe8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000f44:	2301      	movs	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	e001      	b.n	8000f4e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d142      	bne.n	8000fda <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f54:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <SetSysClock+0xe8>)
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <SetSysClock+0xe8>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000f60:	4a22      	ldr	r2, [pc, #136]	; (8000fec <SetSysClock+0xec>)
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SetSysClock+0xec>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <SetSysClock+0xe8>)
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SetSysClock+0xe8>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <SetSysClock+0xe8>)
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <SetSysClock+0xe8>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <SetSysClock+0xe8>)
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SetSysClock+0xe8>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000f8a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <SetSysClock+0xe8>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <SetSysClock+0xf0>)
 8000f90:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <SetSysClock+0xe8>)
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <SetSysClock+0xe8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f9e:	bf00      	nop
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <SetSysClock+0xe8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f9      	beq.n	8000fa0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <SetSysClock+0xf4>)
 8000fae:	f240 7205 	movw	r2, #1797	; 0x705
 8000fb2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <SetSysClock+0xe8>)
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <SetSysClock+0xe8>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <SetSysClock+0xe8>)
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <SetSysClock+0xe8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000fcc:	bf00      	nop
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SetSysClock+0xe8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d1f9      	bne.n	8000fce <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	07405419 	.word	0x07405419
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <__libc_init_array>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	4e0d      	ldr	r6, [pc, #52]	; (8001030 <__libc_init_array+0x38>)
 8000ffc:	4c0d      	ldr	r4, [pc, #52]	; (8001034 <__libc_init_array+0x3c>)
 8000ffe:	1ba4      	subs	r4, r4, r6
 8001000:	10a4      	asrs	r4, r4, #2
 8001002:	2500      	movs	r5, #0
 8001004:	42a5      	cmp	r5, r4
 8001006:	d109      	bne.n	800101c <__libc_init_array+0x24>
 8001008:	4e0b      	ldr	r6, [pc, #44]	; (8001038 <__libc_init_array+0x40>)
 800100a:	4c0c      	ldr	r4, [pc, #48]	; (800103c <__libc_init_array+0x44>)
 800100c:	f000 f820 	bl	8001050 <_init>
 8001010:	1ba4      	subs	r4, r4, r6
 8001012:	10a4      	asrs	r4, r4, #2
 8001014:	2500      	movs	r5, #0
 8001016:	42a5      	cmp	r5, r4
 8001018:	d105      	bne.n	8001026 <__libc_init_array+0x2e>
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001020:	4798      	blx	r3
 8001022:	3501      	adds	r5, #1
 8001024:	e7ee      	b.n	8001004 <__libc_init_array+0xc>
 8001026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800102a:	4798      	blx	r3
 800102c:	3501      	adds	r5, #1
 800102e:	e7f2      	b.n	8001016 <__libc_init_array+0x1e>
 8001030:	08001068 	.word	0x08001068
 8001034:	08001068 	.word	0x08001068
 8001038:	08001068 	.word	0x08001068
 800103c:	0800106c 	.word	0x0800106c

08001040 <memset>:
 8001040:	4402      	add	r2, r0
 8001042:	4603      	mov	r3, r0
 8001044:	4293      	cmp	r3, r2
 8001046:	d100      	bne.n	800104a <memset+0xa>
 8001048:	4770      	bx	lr
 800104a:	f803 1b01 	strb.w	r1, [r3], #1
 800104e:	e7f9      	b.n	8001044 <memset+0x4>

08001050 <_init>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	bf00      	nop
 8001054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001056:	bc08      	pop	{r3}
 8001058:	469e      	mov	lr, r3
 800105a:	4770      	bx	lr

0800105c <_fini>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

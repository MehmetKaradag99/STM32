
ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001194  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800131c  08001324  00011324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800131c  0800131c  0001131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001320  08001320  00011320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00011324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00011324  2**0
                  CONTENTS
  7 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000024  20000024  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00011324  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000534d  00000000  00000000  00011354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b0a  00000000  00000000  000166a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000760  00000000  00000000  000171b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e8  00000000  00000000  00017910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000021e1  00000000  00000000  00017ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002383  00000000  00000000  0001a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001c55c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002078  00000000  00000000  0001c5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001e650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001304 	.word	0x08001304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08001304 	.word	0x08001304

080001c8 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80001e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001ea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	791b      	ldrb	r3, [r3, #4]
 80001f0:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80001f6:	4313      	orrs	r3, r2
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4b18      	ldr	r3, [pc, #96]	; (8000270 <ADC_Init+0xa8>)
 800020e:	4013      	ands	r3, r2
 8000210:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800021a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000220:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	795b      	ldrb	r3, [r3, #5]
 8000226:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000228:	4313      	orrs	r3, r2
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	4313      	orrs	r3, r2
 800022e:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023a:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000242:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	7d1b      	ldrb	r3, [r3, #20]
 8000248:	3b01      	subs	r3, #1
 800024a:	b2da      	uxtb	r2, r3
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4313      	orrs	r3, r2
 8000250:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000252:	7afb      	ldrb	r3, [r7, #11]
 8000254:	051b      	lsls	r3, r3, #20
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	c0fff7fd 	.word	0xc0fff7fd

08000274 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <ADC_CommonInit+0x48>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <ADC_CommonInit+0x4c>)
 800028a:	4013      	ands	r3, r2
 800028c:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000296:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800029c:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80002a2:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002a4:	68fa      	ldr	r2, [r7, #12]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80002aa:	4a04      	ldr	r2, [pc, #16]	; (80002bc <ADC_CommonInit+0x48>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6053      	str	r3, [r2, #4]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40012300 	.word	0x40012300
 80002c0:	fffc30e0 	.word	0xfffc30e0

080002c4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d006      	beq.n	80002e4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	f043 0201 	orr.w	r2, r3, #1
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80002e2:	e005      	b.n	80002f0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f023 0201 	bic.w	r2, r3, #1
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	609a      	str	r2, [r3, #8]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	4608      	mov	r0, r1
 8000306:	4611      	mov	r1, r2
 8000308:	461a      	mov	r2, r3
 800030a:	4603      	mov	r3, r0
 800030c:	70fb      	strb	r3, [r7, #3]
 800030e:	460b      	mov	r3, r1
 8000310:	70bb      	strb	r3, [r7, #2]
 8000312:	4613      	mov	r3, r2
 8000314:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800031e:	78fb      	ldrb	r3, [r7, #3]
 8000320:	2b09      	cmp	r3, #9
 8000322:	d923      	bls.n	800036c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800032a:	78fb      	ldrb	r3, [r7, #3]
 800032c:	f1a3 020a 	sub.w	r2, r3, #10
 8000330:	4613      	mov	r3, r2
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	4413      	add	r3, r2
 8000336:	2207      	movs	r2, #7
 8000338:	fa02 f303 	lsl.w	r3, r2, r3
 800033c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	43db      	mvns	r3, r3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000348:	7879      	ldrb	r1, [r7, #1]
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	f1a3 020a 	sub.w	r2, r3, #10
 8000350:	4613      	mov	r3, r2
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	4413      	add	r3, r2
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800035c:	68fa      	ldr	r2, [r7, #12]
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	4313      	orrs	r3, r2
 8000362:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	e01e      	b.n	80003aa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000372:	78fa      	ldrb	r2, [r7, #3]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	2207      	movs	r2, #7
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	43db      	mvns	r3, r3
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4013      	ands	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800038c:	7879      	ldrb	r1, [r7, #1]
 800038e:	78fa      	ldrb	r2, [r7, #3]
 8000390:	4613      	mov	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	4413      	add	r3, r2
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003aa:	78bb      	ldrb	r3, [r7, #2]
 80003ac:	2b06      	cmp	r3, #6
 80003ae:	d821      	bhi.n	80003f4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80003b6:	78bb      	ldrb	r3, [r7, #2]
 80003b8:	1e5a      	subs	r2, r3, #1
 80003ba:	4613      	mov	r3, r2
 80003bc:	009b      	lsls	r3, r3, #2
 80003be:	4413      	add	r3, r2
 80003c0:	221f      	movs	r2, #31
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	43db      	mvns	r3, r3
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4013      	ands	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80003d2:	78f9      	ldrb	r1, [r7, #3]
 80003d4:	78bb      	ldrb	r3, [r7, #2]
 80003d6:	1e5a      	subs	r2, r3, #1
 80003d8:	4613      	mov	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4413      	add	r3, r2
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003e4:	68fa      	ldr	r2, [r7, #12]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80003f2:	e047      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80003f4:	78bb      	ldrb	r3, [r7, #2]
 80003f6:	2b0c      	cmp	r3, #12
 80003f8:	d821      	bhi.n	800043e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000400:	78bb      	ldrb	r3, [r7, #2]
 8000402:	1fda      	subs	r2, r3, #7
 8000404:	4613      	mov	r3, r2
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	4413      	add	r3, r2
 800040a:	221f      	movs	r2, #31
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	43db      	mvns	r3, r3
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4013      	ands	r3, r2
 800041a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800041c:	78f9      	ldrb	r1, [r7, #3]
 800041e:	78bb      	ldrb	r3, [r7, #2]
 8000420:	1fda      	subs	r2, r3, #7
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	4313      	orrs	r3, r2
 8000434:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800043c:	e022      	b.n	8000484 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	f1a3 020d 	sub.w	r2, r3, #13
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	221f      	movs	r2, #31
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	43db      	mvns	r3, r3
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000462:	78f9      	ldrb	r1, [r7, #3]
 8000464:	78bb      	ldrb	r3, [r7, #2]
 8000466:	f1a3 020d 	sub.w	r2, r3, #13
 800046a:	4613      	mov	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000476:	68fa      	ldr	r2, [r7, #12]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	4313      	orrs	r3, r2
 800047c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000484:	bf00      	nop
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr

08000490 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	609a      	str	r2, [r3, #8]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d006      	beq.n	80004d0 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	f043 0202 	orr.w	r2, r3, #2
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 80004ce:	e005      	b.n	80004dc <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	f023 0202 	bic.w	r2, r3, #2
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	609a      	str	r2, [r3, #8]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr

080004e8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f4:	b29b      	uxth	r3, r3
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000502:	b480      	push	{r7}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	78fb      	ldrb	r3, [r7, #3]
 8000518:	4013      	ands	r3, r2
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800051e:	2301      	movs	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
 8000522:	e001      	b.n	8000528 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000524:	2300      	movs	r3, #0
 8000526:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000536:	b480      	push	{r7}
 8000538:	b087      	sub	sp, #28
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
 800053e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	e076      	b.n	8000640 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000552:	2201      	movs	r2, #1
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	429a      	cmp	r2, r3
 800056c:	d165      	bne.n	800063a <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	4619      	mov	r1, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	791b      	ldrb	r3, [r3, #4]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d003      	beq.n	80005ac <GPIO_Init+0x76>
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d12e      	bne.n	800060a <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	2103      	movs	r1, #3
 80005b6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	401a      	ands	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689a      	ldr	r2, [r3, #8]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	4619      	mov	r1, r3
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	685a      	ldr	r2, [r3, #4]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	2301      	movs	r3, #1
 80005e6:	408b      	lsls	r3, r1
 80005e8:	43db      	mvns	r3, r3
 80005ea:	401a      	ands	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	683a      	ldr	r2, [r7, #0]
 80005f6:	7992      	ldrb	r2, [r2, #6]
 80005f8:	4611      	mov	r1, r2
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	b292      	uxth	r2, r2
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	b292      	uxth	r2, r2
 8000604:	431a      	orrs	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	b29b      	uxth	r3, r3
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	2103      	movs	r1, #3
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	401a      	ands	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68da      	ldr	r2, [r3, #12]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	79db      	ldrb	r3, [r3, #7]
 800062a:	4619      	mov	r1, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa01 f303 	lsl.w	r3, r1, r3
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	2b0f      	cmp	r3, #15
 8000644:	d985      	bls.n	8000552 <GPIO_Init+0x1c>
    }
  }
}
 8000646:	bf00      	nop
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	831a      	strh	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	887a      	ldrh	r2, [r7, #2]
 8000680:	835a      	strh	r2, [r3, #26]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <RCC_DeInit+0x50>)
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <RCC_DeInit+0x50>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <RCC_DeInit+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80006a6:	4a0e      	ldr	r2, [pc, #56]	; (80006e0 <RCC_DeInit+0x50>)
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <RCC_DeInit+0x50>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80006b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <RCC_DeInit+0x50>)
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <RCC_DeInit+0x54>)
 80006ba:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <RCC_DeInit+0x50>)
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <RCC_DeInit+0x58>)
 80006c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <RCC_DeInit+0x50>)
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <RCC_DeInit+0x50>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <RCC_DeInit+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40023800 	.word	0x40023800
 80006e4:	24003010 	.word	0x24003010
 80006e8:	20003000 	.word	0x20003000

080006ec <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <RCC_HSEConfig+0x24>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <RCC_HSEConfig+0x24>)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	7013      	strb	r3, [r2, #0]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40023802 	.word	0x40023802

08000714 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000726:	2031      	movs	r0, #49	; 0x31
 8000728:	f000 f96e 	bl	8000a08 <RCC_GetFlagStatus>
 800072c:	4603      	mov	r3, r0
 800072e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800073c:	d002      	beq.n	8000744 <RCC_WaitForHSEStartUp+0x30>
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f0      	beq.n	8000726 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000744:	2031      	movs	r0, #49	; 0x31
 8000746:	f000 f95f 	bl	8000a08 <RCC_GetFlagStatus>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000750:	2301      	movs	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	e001      	b.n	800075a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800075a:	79fb      	ldrb	r3, [r7, #7]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000772:	490b      	ldr	r1, [pc, #44]	; (80007a0 <RCC_PLLConfig+0x3c>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	019a      	lsls	r2, r3, #6
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	431a      	orrs	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	085b      	lsrs	r3, r3, #1
 8000780:	3b01      	subs	r3, #1
 8000782:	041b      	lsls	r3, r3, #16
 8000784:	431a      	orrs	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800078e:	4313      	orrs	r3, r2
 8000790:	604b      	str	r3, [r1, #4]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <RCC_PLLCmd+0x1c>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	42470060 	.word	0x42470060

080007c4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <RCC_SYSCLKConfig+0x34>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f023 0303 	bic.w	r3, r3, #3
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <RCC_SYSCLKConfig+0x34>)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	6093      	str	r3, [r2, #8]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	40023800 	.word	0x40023800

080007fc <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <RCC_GetSYSCLKSource+0x1c>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 030c 	and.w	r3, r3, #12
 800080a:	b2db      	uxtb	r3, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <RCC_HCLKConfig+0x34>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000834:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4313      	orrs	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <RCC_HCLKConfig+0x34>)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	6093      	str	r3, [r2, #8]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40023800 	.word	0x40023800

08000854 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <RCC_PCLK1Config+0x34>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800086c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4313      	orrs	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <RCC_PCLK1Config+0x34>)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6093      	str	r3, [r2, #8]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40023800 	.word	0x40023800

0800088c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <RCC_PCLK2Config+0x38>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008a4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <RCC_PCLK2Config+0x38>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6093      	str	r3, [r2, #8]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d006      	beq.n	80008e8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008da:	490a      	ldr	r1, [pc, #40]	; (8000904 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008e6:	e006      	b.n	80008f6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	43db      	mvns	r3, r3
 80008f2:	4013      	ands	r3, r2
 80008f4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800091a:	490a      	ldr	r1, [pc, #40]	; (8000944 <RCC_APB1PeriphClockCmd+0x3c>)
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <RCC_APB1PeriphClockCmd+0x3c>)
 800091e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000926:	e006      	b.n	8000936 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <RCC_APB1PeriphClockCmd+0x3c>)
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <RCC_APB1PeriphClockCmd+0x3c>)
 800092c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	43db      	mvns	r3, r3
 8000932:	4013      	ands	r3, r2
 8000934:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800095a:	490a      	ldr	r1, [pc, #40]	; (8000984 <RCC_APB2PeriphClockCmd+0x3c>)
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <RCC_APB2PeriphClockCmd+0x3c>)
 800095e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4313      	orrs	r3, r2
 8000964:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000966:	e006      	b.n	8000976 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <RCC_APB2PeriphClockCmd+0x3c>)
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <RCC_APB2PeriphClockCmd+0x3c>)
 800096c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	43db      	mvns	r3, r3
 8000972:	4013      	ands	r3, r2
 8000974:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d006      	beq.n	80009a8 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800099a:	490a      	ldr	r1, [pc, #40]	; (80009c4 <RCC_APB1PeriphResetCmd+0x3c>)
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <RCC_APB1PeriphResetCmd+0x3c>)
 800099e:	6a1a      	ldr	r2, [r3, #32]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80009a6:	e006      	b.n	80009b6 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <RCC_APB1PeriphResetCmd+0x3c>)
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <RCC_APB1PeriphResetCmd+0x3c>)
 80009ac:	6a1a      	ldr	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4013      	ands	r3, r2
 80009b4:	620b      	str	r3, [r1, #32]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80009da:	490a      	ldr	r1, [pc, #40]	; (8000a04 <RCC_APB2PeriphResetCmd+0x3c>)
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <RCC_APB2PeriphResetCmd+0x3c>)
 80009de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80009e6:	e006      	b.n	80009f6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80009e8:	4906      	ldr	r1, [pc, #24]	; (8000a04 <RCC_APB2PeriphResetCmd+0x3c>)
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <RCC_APB2PeriphResetCmd+0x3c>)
 80009ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4013      	ands	r3, r2
 80009f4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d103      	bne.n	8000a34 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <RCC_GetFlagStatus+0x70>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d103      	bne.n	8000a42 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <RCC_GetFlagStatus+0x70>)
 8000a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e002      	b.n	8000a48 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <RCC_GetFlagStatus+0x70>)
 8000a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a46:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 031f 	and.w	r3, r3, #31
 8000a4e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	fa22 f303 	lsr.w	r3, r2, r3
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000a60:	2301      	movs	r3, #1
 8000a62:	74fb      	strb	r3, [r7, #19]
 8000a64:	e001      	b.n	8000a6a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a6a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	371c      	adds	r7, #28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40023800 	.word	0x40023800

08000a7c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a60      	ldr	r2, [pc, #384]	; (8000c08 <TIM_DeInit+0x18c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d108      	bne.n	8000a9e <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff ff9a 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff ff96 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8000a9c:	e0af      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d108      	bne.n	8000ab8 <TIM_DeInit+0x3c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ff6d 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff ff69 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000ab6:	e0a2      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a54      	ldr	r2, [pc, #336]	; (8000c0c <TIM_DeInit+0x190>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d108      	bne.n	8000ad2 <TIM_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff ff60 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff ff5c 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000ad0:	e095      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a4e      	ldr	r2, [pc, #312]	; (8000c10 <TIM_DeInit+0x194>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d108      	bne.n	8000aec <TIM_DeInit+0x70>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000ada:	2101      	movs	r1, #1
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff ff53 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2004      	movs	r0, #4
 8000ae6:	f7ff ff4f 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000aea:	e088      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a49      	ldr	r2, [pc, #292]	; (8000c14 <TIM_DeInit+0x198>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d108      	bne.n	8000b06 <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8000af4:	2101      	movs	r1, #1
 8000af6:	2008      	movs	r0, #8
 8000af8:	f7ff ff46 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff ff42 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000b04:	e07b      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a43      	ldr	r2, [pc, #268]	; (8000c18 <TIM_DeInit+0x19c>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d108      	bne.n	8000b20 <TIM_DeInit+0xa4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	2010      	movs	r0, #16
 8000b12:	f7ff ff39 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8000b16:	2100      	movs	r1, #0
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f7ff ff35 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000b1e:	e06e      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <TIM_DeInit+0x1a0>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d108      	bne.n	8000b3a <TIM_DeInit+0xbe>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2020      	movs	r0, #32
 8000b2c:	f7ff ff2c 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2020      	movs	r0, #32
 8000b34:	f7ff ff28 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000b38:	e061      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a38      	ldr	r2, [pc, #224]	; (8000c20 <TIM_DeInit+0x1a4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d108      	bne.n	8000b54 <TIM_DeInit+0xd8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8000b42:	2101      	movs	r1, #1
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff ff3f 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff ff3b 	bl	80009c8 <RCC_APB2PeriphResetCmd>
}
 8000b52:	e054      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <TIM_DeInit+0x1a8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d10a      	bne.n	8000b72 <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b62:	f7ff ff31 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8000b66:	2100      	movs	r1, #0
 8000b68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b6c:	f7ff ff2c 	bl	80009c8 <RCC_APB2PeriphResetCmd>
}
 8000b70:	e045      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a2c      	ldr	r2, [pc, #176]	; (8000c28 <TIM_DeInit+0x1ac>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d10a      	bne.n	8000b90 <TIM_DeInit+0x114>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b80:	f7ff ff22 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8000b84:	2100      	movs	r1, #0
 8000b86:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b8a:	f7ff ff1d 	bl	80009c8 <RCC_APB2PeriphResetCmd>
}
 8000b8e:	e036      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <TIM_DeInit+0x1b0>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d10a      	bne.n	8000bae <TIM_DeInit+0x132>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b9e:	f7ff ff13 	bl	80009c8 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ba8:	f7ff ff0e 	bl	80009c8 <RCC_APB2PeriphResetCmd>
}
 8000bac:	e027      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <TIM_DeInit+0x1b4>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d108      	bne.n	8000bc8 <TIM_DeInit+0x14c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	2040      	movs	r0, #64	; 0x40
 8000bba:	f7ff fee5 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2040      	movs	r0, #64	; 0x40
 8000bc2:	f7ff fee1 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000bc6:	e01a      	b.n	8000bfe <TIM_DeInit+0x182>
  else if (TIMx == TIM13) 
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <TIM_DeInit+0x1b8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d108      	bne.n	8000be2 <TIM_DeInit+0x166>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	2080      	movs	r0, #128	; 0x80
 8000bd4:	f7ff fed8 	bl	8000988 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2080      	movs	r0, #128	; 0x80
 8000bdc:	f7ff fed4 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000be0:	e00d      	b.n	8000bfe <TIM_DeInit+0x182>
    if (TIMx == TIM14) 
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <TIM_DeInit+0x1bc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d109      	bne.n	8000bfe <TIM_DeInit+0x182>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8000bea:	2101      	movs	r1, #1
 8000bec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bf0:	f7ff feca 	bl	8000988 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bfa:	f7ff fec5 	bl	8000988 <RCC_APB1PeriphResetCmd>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40010000 	.word	0x40010000
 8000c0c:	40000400 	.word	0x40000400
 8000c10:	40000800 	.word	0x40000800
 8000c14:	40000c00 	.word	0x40000c00
 8000c18:	40001000 	.word	0x40001000
 8000c1c:	40001400 	.word	0x40001400
 8000c20:	40010400 	.word	0x40010400
 8000c24:	40014000 	.word	0x40014000
 8000c28:	40014400 	.word	0x40014400
 8000c2c:	40014800 	.word	0x40014800
 8000c30:	40001800 	.word	0x40001800
 8000c34:	40001c00 	.word	0x40001c00
 8000c38:	40002000 	.word	0x40002000

08000c3c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <TIM_TimeBaseInit+0xbc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <TIM_TimeBaseInit+0x44>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <TIM_TimeBaseInit+0xc0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00f      	beq.n	8000c80 <TIM_TimeBaseInit+0x44>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c66:	d00b      	beq.n	8000c80 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <TIM_TimeBaseInit+0xc4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d007      	beq.n	8000c80 <TIM_TimeBaseInit+0x44>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <TIM_TimeBaseInit+0xc8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d003      	beq.n	8000c80 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <TIM_TimeBaseInit+0xcc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d108      	bne.n	8000c92 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000c80:	89fb      	ldrh	r3, [r7, #14]
 8000c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c86:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	885a      	ldrh	r2, [r3, #2]
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <TIM_TimeBaseInit+0xd0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00c      	beq.n	8000cb4 <TIM_TimeBaseInit+0x78>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1c      	ldr	r2, [pc, #112]	; (8000d10 <TIM_TimeBaseInit+0xd4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d008      	beq.n	8000cb4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000ca2:	89fb      	ldrh	r3, [r7, #14]
 8000ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ca8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	891a      	ldrh	r2, [r3, #8]
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	89fa      	ldrh	r2, [r7, #14]
 8000cb8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	881a      	ldrh	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <TIM_TimeBaseInit+0xbc>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d003      	beq.n	8000cda <TIM_TimeBaseInit+0x9e>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <TIM_TimeBaseInit+0xc0>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d104      	bne.n	8000ce4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	7a9b      	ldrb	r3, [r3, #10]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	829a      	strh	r2, [r3, #20]
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40010000 	.word	0x40010000
 8000cfc:	40010400 	.word	0x40010400
 8000d00:	40000400 	.word	0x40000400
 8000d04:	40000800 	.word	0x40000800
 8000d08:	40000c00 	.word	0x40000c00
 8000d0c:	40001000 	.word	0x40001000
 8000d10:	40001400 	.word	0x40001400

08000d14 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d30:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	89fa      	ldrh	r2, [r7, #14]
 8000d3e:	801a      	strh	r2, [r3, #0]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d008      	beq.n	8000d88 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000d86:	e007      	b.n	8000d98 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	801a      	strh	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <main>:




int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  StartConfigOptions();
 8000da8:	f000 f854 	bl	8000e54 <StartConfigOptions>


  while (1)
  {
	  ADC_Value = ADC_Getvalue();
 8000dac:	f000 f8ee 	bl	8000f8c <ADC_Getvalue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <main+0x28>)
 8000db6:	801a      	strh	r2, [r3, #0]
	  Adjust_LED_Brightness();
 8000db8:	f000 f8fa 	bl	8000fb0 <Adjust_LED_Brightness>
	  GetCounterValue = TIM_GetCounter(TIM2);
 8000dbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dc0:	f7ff ffc4 	bl	8000d4c <TIM_GetCounter>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <main+0x2c>)
 8000dc8:	601a      	str	r2, [r3, #0]
	  ADC_Value = ADC_Getvalue();
 8000dca:	e7ef      	b.n	8000dac <main+0x8>
 8000dcc:	20000020 	.word	0x20000020
 8000dd0:	2000001c 	.word	0x2000001c

08000dd4 <RCC_Config>:




static void RCC_Config()
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af02      	add	r7, sp, #8

	RCC_DeInit();
 8000dda:	f7ff fc59 	bl	8000690 <RCC_DeInit>

	RCC_HSEConfig(RCC_HSE_ON);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fc84 	bl	80006ec <RCC_HSEConfig>
	while(RCC_WaitForHSEStartUp() != SUCCESS);
 8000de4:	bf00      	nop
 8000de6:	f7ff fc95 	bl	8000714 <RCC_WaitForHSEStartUp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d1fa      	bne.n	8000de6 <RCC_Config+0x12>
	while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) != SET);
 8000df0:	bf00      	nop
 8000df2:	2031      	movs	r0, #49	; 0x31
 8000df4:	f7ff fe08 	bl	8000a08 <RCC_GetFlagStatus>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d1f9      	bne.n	8000df2 <RCC_Config+0x1e>

	RCC_PLLConfig(RCC_PLLSource_HSE,8,50,2,NoImportent);
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2302      	movs	r3, #2
 8000e04:	2232      	movs	r2, #50	; 0x32
 8000e06:	2108      	movs	r1, #8
 8000e08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e0c:	f7ff fcaa 	bl	8000764 <RCC_PLLConfig>
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fd03 	bl	800081c <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div2);
 8000e16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e1a:	f7ff fd1b 	bl	8000854 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div1);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fd34 	bl	800088c <RCC_PCLK2Config>

	RCC_PLLCmd(ENABLE);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f7ff fcbd 	bl	80007a4 <RCC_PLLCmd>

	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY != SET));
 8000e2a:	bf00      	nop
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f7ff fdeb 	bl	8000a08 <RCC_GetFlagStatus>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f9      	bne.n	8000e2c <RCC_Config+0x58>

	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff fcc3 	bl	80007c4 <RCC_SYSCLKConfig>

	if(RCC_GetSYSCLKSource() != is_PLL_Clk)
 8000e3e:	f7ff fcdd 	bl	80007fc <RCC_GetSYSCLKSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d001      	beq.n	8000e4c <RCC_Config+0x78>
		Error_Handler();
 8000e48:	f000 f922 	bl	8001090 <Error_Handler>

}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <StartConfigOptions>:


static void StartConfigOptions(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	RCC_Config();
 8000e58:	f7ff ffbc 	bl	8000dd4 <RCC_Config>
	GPIO_Config();
 8000e5c:	f000 f814 	bl	8000e88 <GPIO_Config>
	Timer_Config();
 8000e60:	f000 f8e6 	bl	8001030 <Timer_Config>
	ADC_Config();
 8000e64:	f000 f858 	bl	8000f18 <ADC_Config>
	ADC_ContinuousModeCmd(ADC1,ENABLE);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <StartConfigOptions+0x30>)
 8000e6c:	f7ff fb20 	bl	80004b0 <ADC_ContinuousModeCmd>
	ADC_Cmd(ADC1,ENABLE);
 8000e70:	2101      	movs	r1, #1
 8000e72:	4804      	ldr	r0, [pc, #16]	; (8000e84 <StartConfigOptions+0x30>)
 8000e74:	f7ff fa26 	bl	80002c4 <ADC_Cmd>
	ADC_SoftwareStartConv(ADC1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <StartConfigOptions+0x30>)
 8000e7a:	f7ff fb09 	bl	8000490 <ADC_SoftwareStartConv>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40012000 	.word	0x40012000

08000e88 <GPIO_Config>:

static void GPIO_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000e8e:	2101      	movs	r1, #1
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fd19 	bl	80008c8 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f7ff fd15 	bl	80008c8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStruct;
	memset(&GPIO_InitStruct,0,sizeof(GPIO_InitStruct));
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fa25 	bl	80012f4 <memset>

	// For ADC

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AN;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP ;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd= GPIO_PuPd_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4813      	ldr	r0, [pc, #76]	; (8000f10 <GPIO_Config+0x88>)
 8000ec4:	f7ff fb37 	bl	8000536 <GPIO_Init>


	//For LEDs

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8000ecc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ed0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000eda:	2303      	movs	r3, #3
 8000edc:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <GPIO_Config+0x8c>)
 8000ee4:	f7ff fb27 	bl	8000536 <GPIO_Init>

	//For Timer2

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	713b      	strb	r3, [r7, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000eec:	2300      	movs	r3, #0
 8000eee:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_1;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	717b      	strb	r3, [r7, #5]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <GPIO_Config+0x88>)
 8000f02:	f7ff fb18 	bl	8000536 <GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <ADC_Config>:

static void ADC_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f24:	f7ff fd10 	bl	8000948 <RCC_APB2PeriphClockCmd>

	ADC_InitTypeDef ADC_InitSturct;
	ADC_CommonInitTypeDef ADC_ComInit;

	memset(&ADC_ComInit,0,sizeof(ADC_ComInit));
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f9e0 	bl	80012f4 <memset>
	memset(&ADC_InitSturct,0,sizeof ADC_InitSturct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2218      	movs	r2, #24
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f9d9 	bl	80012f4 <memset>

	ADC_InitSturct.ADC_Resolution = ADC_Resolution_12b;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
	ADC_InitSturct.ADC_ContinuousConvMode = ENABLE;
 8000f46:	2301      	movs	r3, #1
 8000f48:	757b      	strb	r3, [r7, #21]
	ADC_InitSturct.ADC_DataAlign = ADC_DataAlign_Right;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
	ADC_InitSturct.ADC_ScanConvMode = DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	753b      	strb	r3, [r7, #20]

	ADC_Init(ADC1,&ADC_InitSturct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <ADC_Config+0x70>)
 8000f5a:	f7ff f935 	bl	80001c8 <ADC_Init>


	ADC_ComInit.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
	ADC_ComInit.ADC_Mode = ADC_Mode_Independent;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
	ADC_ComInit.ADC_Prescaler = ADC_Prescaler_Div2;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]

	ADC_CommonInit(&ADC_ComInit);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f981 	bl	8000274 <ADC_CommonInit>

	ADC_RegularChannelConfig(ADC1,ADC_Channel_0,1,ADC_SampleTime_56Cycles);
 8000f72:	2303      	movs	r3, #3
 8000f74:	2201      	movs	r2, #1
 8000f76:	2100      	movs	r1, #0
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <ADC_Config+0x70>)
 8000f7a:	f7ff f9bf 	bl	80002fc <ADC_RegularChannelConfig>


}
 8000f7e:	bf00      	nop
 8000f80:	3728      	adds	r7, #40	; 0x28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40012000 	.word	0x40012000

08000f8c <ADC_Getvalue>:

static uint16_t ADC_Getvalue(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);
 8000f90:	bf00      	nop
 8000f92:	2102      	movs	r1, #2
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <ADC_Getvalue+0x20>)
 8000f96:	f7ff fab4 	bl	8000502 <ADC_GetFlagStatus>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f8      	beq.n	8000f92 <ADC_Getvalue+0x6>

	return (uint16_t)ADC_GetConversionValue(ADC1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <ADC_Getvalue+0x20>)
 8000fa2:	f7ff faa1 	bl	80004e8 <ADC_GetConversionValue>
 8000fa6:	4603      	mov	r3, r0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40012000 	.word	0x40012000

08000fb0 <Adjust_LED_Brightness>:

static void Adjust_LED_Brightness(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	if(ADC_Value>1000)
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <Adjust_LED_Brightness+0x78>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fbc:	d90e      	bls.n	8000fdc <Adjust_LED_Brightness+0x2c>
	{
		GPIO_SetBits(GPIOD,GPIO_Pin_12);
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8000fc4:	f7ff fb45 	bl	8000652 <GPIO_SetBits>
		GPIO_ResetBits(GPIOD,GPIO_Pin_14);
 8000fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fcc:	4817      	ldr	r0, [pc, #92]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8000fce:	f7ff fb4f 	bl	8000670 <GPIO_ResetBits>
		GPIO_ResetBits(GPIOD,GPIO_Pin_15);
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	4815      	ldr	r0, [pc, #84]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8000fd8:	f7ff fb4a 	bl	8000670 <GPIO_ResetBits>
	}

	if(ADC_Value>2000)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <Adjust_LED_Brightness+0x78>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fe4:	d904      	bls.n	8000ff0 <Adjust_LED_Brightness+0x40>
		GPIO_SetBits(GPIOD,GPIO_Pin_13);
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8000fec:	f7ff fb31 	bl	8000652 <GPIO_SetBits>
	if(ADC_Value<1000)
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <Adjust_LED_Brightness+0x78>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ff8:	d213      	bcs.n	8001022 <Adjust_LED_Brightness+0x72>
	{
		GPIO_SetBits(GPIOD,GPIO_Pin_14);
 8000ffa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffe:	480b      	ldr	r0, [pc, #44]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8001000:	f7ff fb27 	bl	8000652 <GPIO_SetBits>
		GPIO_SetBits(GPIOD,GPIO_Pin_15);
 8001004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001008:	4808      	ldr	r0, [pc, #32]	; (800102c <Adjust_LED_Brightness+0x7c>)
 800100a:	f7ff fb22 	bl	8000652 <GPIO_SetBits>
		GPIO_ResetBits(GPIOD,GPIO_Pin_12);
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <Adjust_LED_Brightness+0x7c>)
 8001014:	f7ff fb2c 	bl	8000670 <GPIO_ResetBits>
		GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <Adjust_LED_Brightness+0x7c>)
 800101e:	f7ff fb27 	bl	8000670 <GPIO_ResetBits>
	}
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000020 	.word	0x20000020
 800102c:	40020c00 	.word	0x40020c00

08001030 <Timer_Config>:

static void Timer_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

	TIM_TimeBaseInitTypeDef Tim_Init;
	memset(&Tim_Init,0,sizeof Tim_Init);
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	220c      	movs	r2, #12
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f959 	bl	80012f4 <memset>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
 8001042:	2101      	movs	r1, #1
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff fc5f 	bl	8000908 <RCC_APB1PeriphClockCmd>

	TIM_DeInit(TIM2);
 800104a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800104e:	f7ff fd15 	bl	8000a7c <TIM_DeInit>

	Tim_Init.TIM_ClockDivision = TIM_CKD_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	81bb      	strh	r3, [r7, #12]
	Tim_Init.TIM_CounterMode = TIM_CounterMode_Up;
 8001056:	2300      	movs	r3, #0
 8001058:	80fb      	strh	r3, [r7, #6]
	Tim_Init.TIM_Period = 9999;
 800105a:	f242 730f 	movw	r3, #9999	; 0x270f
 800105e:	60bb      	str	r3, [r7, #8]
	Tim_Init.TIM_Prescaler = 49;
 8001060:	2331      	movs	r3, #49	; 0x31
 8001062:	80bb      	strh	r3, [r7, #4]
	Tim_Init.TIM_RepetitionCounter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM2,&Tim_Init);
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001070:	f7ff fde4 	bl	8000c3c <TIM_TimeBaseInit>

	TIM_CounterModeConfig(TIM2,TIM_CounterMode_Up);
 8001074:	2100      	movs	r1, #0
 8001076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800107a:	f7ff fe4b 	bl	8000d14 <TIM_CounterModeConfig>

	TIM_Cmd(TIM2,ENABLE);
 800107e:	2101      	movs	r1, #1
 8001080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001084:	f7ff fe6e 	bl	8000d64 <TIM_Cmd>

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <Error_Handler>:

static void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
	while(1);
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x4>
	...

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800109c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800109e:	e003      	b.n	80010a8 <LoopCopyDataInit>

080010a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010a6:	3104      	adds	r1, #4

080010a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010b0:	d3f6      	bcc.n	80010a0 <CopyDataInit>
  ldr  r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010b4:	e002      	b.n	80010bc <LoopFillZerobss>

080010b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010b8:	f842 3b04 	str.w	r3, [r2], #4

080010bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010c0:	d3f9      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f000 f841 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f000 f8f1 	bl	80012ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fe6b 	bl	8000da4 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010d4:	08001324 	.word	0x08001324
  ldr  r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010dc:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80010e0:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80010e4:	20000024 	.word	0x20000024

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>

080010ea <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <HardFault_Handler+0x4>

080010fe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001102:	e7fe      	b.n	8001102 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001108:	e7fe      	b.n	8001108 <BusFault_Handler+0x4>

0800110a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800110e:	e7fe      	b.n	800110e <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <SystemInit+0x60>)
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <SystemInit+0x60>)
 8001150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800115c:	4a13      	ldr	r2, [pc, #76]	; (80011ac <SystemInit+0x64>)
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <SystemInit+0x64>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <SystemInit+0x64>)
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <SystemInit+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SystemInit+0x64>)
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <SystemInit+0x68>)
 8001182:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <SystemInit+0x64>)
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <SystemInit+0x64>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x64>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001196:	f000 f80d 	bl	80011b4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <SystemInit+0x60>)
 800119c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011a0:	609a      	str	r2, [r3, #8]
#endif
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	40023800 	.word	0x40023800
 80011b0:	24003010 	.word	0x24003010

080011b4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011c2:	4a36      	ldr	r2, [pc, #216]	; (800129c <SetSysClock+0xe8>)
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <SetSysClock+0xe8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <SetSysClock+0xe8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <SetSysClock+0x38>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011ea:	d1f0      	bne.n	80011ce <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <SetSysClock+0xe8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80011f8:	2301      	movs	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	e001      	b.n	8001202 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d142      	bne.n	800128e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001208:	4a24      	ldr	r2, [pc, #144]	; (800129c <SetSysClock+0xe8>)
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <SetSysClock+0xe8>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SetSysClock+0xec>)
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <SetSysClock+0xec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800121e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001220:	4a1e      	ldr	r2, [pc, #120]	; (800129c <SetSysClock+0xe8>)
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <SetSysClock+0xe8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <SetSysClock+0xe8>)
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <SetSysClock+0xe8>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001232:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <SetSysClock+0xe8>)
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <SetSysClock+0xe8>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800123e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <SetSysClock+0xe8>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <SetSysClock+0xf0>)
 8001244:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <SetSysClock+0xe8>)
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <SetSysClock+0xe8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001250:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001252:	bf00      	nop
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <SetSysClock+0xe8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f9      	beq.n	8001254 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <SetSysClock+0xf4>)
 8001262:	f240 7205 	movw	r2, #1797	; 0x705
 8001266:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001268:	4a0c      	ldr	r2, [pc, #48]	; (800129c <SetSysClock+0xe8>)
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <SetSysClock+0xe8>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <SetSysClock+0xe8>)
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <SetSysClock+0xe8>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001280:	bf00      	nop
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <SetSysClock+0xe8>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d1f9      	bne.n	8001282 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000
 80012a4:	07405419 	.word	0x07405419
 80012a8:	40023c00 	.word	0x40023c00

080012ac <__libc_init_array>:
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	4e0d      	ldr	r6, [pc, #52]	; (80012e4 <__libc_init_array+0x38>)
 80012b0:	4c0d      	ldr	r4, [pc, #52]	; (80012e8 <__libc_init_array+0x3c>)
 80012b2:	1ba4      	subs	r4, r4, r6
 80012b4:	10a4      	asrs	r4, r4, #2
 80012b6:	2500      	movs	r5, #0
 80012b8:	42a5      	cmp	r5, r4
 80012ba:	d109      	bne.n	80012d0 <__libc_init_array+0x24>
 80012bc:	4e0b      	ldr	r6, [pc, #44]	; (80012ec <__libc_init_array+0x40>)
 80012be:	4c0c      	ldr	r4, [pc, #48]	; (80012f0 <__libc_init_array+0x44>)
 80012c0:	f000 f820 	bl	8001304 <_init>
 80012c4:	1ba4      	subs	r4, r4, r6
 80012c6:	10a4      	asrs	r4, r4, #2
 80012c8:	2500      	movs	r5, #0
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	d105      	bne.n	80012da <__libc_init_array+0x2e>
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d4:	4798      	blx	r3
 80012d6:	3501      	adds	r5, #1
 80012d8:	e7ee      	b.n	80012b8 <__libc_init_array+0xc>
 80012da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012de:	4798      	blx	r3
 80012e0:	3501      	adds	r5, #1
 80012e2:	e7f2      	b.n	80012ca <__libc_init_array+0x1e>
 80012e4:	0800131c 	.word	0x0800131c
 80012e8:	0800131c 	.word	0x0800131c
 80012ec:	0800131c 	.word	0x0800131c
 80012f0:	08001320 	.word	0x08001320

080012f4 <memset>:
 80012f4:	4402      	add	r2, r0
 80012f6:	4603      	mov	r3, r0
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d100      	bne.n	80012fe <memset+0xa>
 80012fc:	4770      	bx	lr
 80012fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001302:	e7f9      	b.n	80012f8 <memset+0x4>

08001304 <_init>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr

08001310 <_fini>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr

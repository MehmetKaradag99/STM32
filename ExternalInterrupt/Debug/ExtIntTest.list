
ExtIntTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000850  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009d8  080009d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009d8  080009d8  000109d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080009e0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000030  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002c42  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b89  00000000  00000000  00022c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003e0  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  00023be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000178e  00000000  00000000  00023f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000177b  00000000  00000000  000256c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026e41  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ea8  00000000  00000000  00026ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00027d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009c0 	.word	0x080009c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080009c0 	.word	0x080009c0

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <EXTI_GetITStatus+0x44>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI_GetITStatus+0x44>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <EXTI_ClearITPendingBit+0x1c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6153      	str	r3, [r2, #20]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40013c00 	.word	0x40013c00

080003d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e076      	b.n	80004e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003f4:	2201      	movs	r2, #1
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4013      	ands	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d165      	bne.n	80004dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2103      	movs	r1, #3
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	401a      	ands	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	4619      	mov	r1, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <GPIO_Init+0x76>
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d12e      	bne.n	80004ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	4619      	mov	r1, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	b29b      	uxth	r3, r3
 8000484:	4619      	mov	r1, r3
 8000486:	2301      	movs	r3, #1
 8000488:	408b      	lsls	r3, r1
 800048a:	43db      	mvns	r3, r3
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	7992      	ldrb	r2, [r2, #6]
 800049a:	4611      	mov	r1, r2
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	b292      	uxth	r2, r2
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	b292      	uxth	r2, r2
 80004a6:	431a      	orrs	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	401a      	ands	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	4619      	mov	r1, r3
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d985      	bls.n	80003f4 <GPIO_Init+0x1c>
    }
  }
}
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	887a      	ldrh	r2, [r7, #2]
 8000504:	831a      	strh	r2, [r3, #24]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	460b      	mov	r3, r1
 800051c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	887a      	ldrh	r2, [r7, #2]
 8000522:	835a      	strh	r2, [r3, #26]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000542:	490a      	ldr	r1, [pc, #40]	; (800056c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4313      	orrs	r3, r2
 800054c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800054e:	e006      	b.n	800055e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000550:	4906      	ldr	r1, [pc, #24]	; (800056c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	43db      	mvns	r3, r3
 800055a:	4013      	ands	r3, r2
 800055c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800

08000570 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000582:	490a      	ldr	r1, [pc, #40]	; (80005ac <RCC_APB2PeriphClockCmd+0x3c>)
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <RCC_APB2PeriphClockCmd+0x3c>)
 8000586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4313      	orrs	r3, r2
 800058c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800058e:	e006      	b.n	800059e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <RCC_APB2PeriphClockCmd+0x3c>)
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <RCC_APB2PeriphClockCmd+0x3c>)
 8000594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	43db      	mvns	r3, r3
 800059a:	4013      	ands	r3, r2
 800059c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80005b0:	b490      	push	{r4, r7}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	460a      	mov	r2, r1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	4613      	mov	r3, r2
 80005be:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80005c4:	79bb      	ldrb	r3, [r7, #6]
 80005c6:	f003 0303 	and.w	r3, r3, #3
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	220f      	movs	r2, #15
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80005d4:	4916      	ldr	r1, [pc, #88]	; (8000630 <SYSCFG_EXTILineConfig+0x80>)
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4618      	mov	r0, r3
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <SYSCFG_EXTILineConfig+0x80>)
 80005e0:	79bb      	ldrb	r3, [r7, #6]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	3302      	adds	r3, #2
 80005e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	1c83      	adds	r3, r0, #2
 80005f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <SYSCFG_EXTILineConfig+0x80>)
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	461c      	mov	r4, r3
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <SYSCFG_EXTILineConfig+0x80>)
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3302      	adds	r3, #2
 800060c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000610:	79f9      	ldrb	r1, [r7, #7]
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	f003 0303 	and.w	r3, r3, #3
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	431a      	orrs	r2, r3
 8000620:	1ca3      	adds	r3, r4, #2
 8000622:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bc90      	pop	{r4, r7}
 800062e:	4770      	bx	lr
 8000630:	40013800 	.word	0x40013800

08000634 <main>:
void externalIntConfig();
void NVIC_Config();


int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	gpio_Init(GPIOA);
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x14>)
 800063a:	f000 f85b 	bl	80006f4 <gpio_Init>
	externalIntConfig();
 800063e:	f000 f83b 	bl	80006b8 <externalIntConfig>
	NVIC_Config();
 8000642:	f000 f829 	bl	8000698 <NVIC_Config>

  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x12>
 8000648:	40020000 	.word	0x40020000

0800064c <EXTI0_IRQHandler>:

  }
}

void EXTI0_IRQHandler()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0 == SET))
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff fe8d 	bl	8000370 <EXTI_GetITStatus>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d014      	beq.n	8000686 <EXTI0_IRQHandler+0x3a>
	{
		if(flag)
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <EXTI0_IRQHandler+0x44>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d008      	beq.n	8000676 <EXTI0_IRQHandler+0x2a>
		{
		GPIO_SetBits(GPIOD,GPIO_Pin_13);
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	480a      	ldr	r0, [pc, #40]	; (8000694 <EXTI0_IRQHandler+0x48>)
 800066a:	f7ff ff43 	bl	80004f4 <GPIO_SetBits>
		flag=0;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <EXTI0_IRQHandler+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e007      	b.n	8000686 <EXTI0_IRQHandler+0x3a>
		}
		else
		{
			GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <EXTI0_IRQHandler+0x48>)
 800067c:	f7ff ff49 	bl	8000512 <GPIO_ResetBits>
			flag=1;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <EXTI0_IRQHandler+0x44>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		}
	}
	EXTI_ClearITPendingBit(EXTI_Line0);
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff fe96 	bl	80003b8 <EXTI_ClearITPendingBit>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	40020c00 	.word	0x40020c00

08000698 <NVIC_Config>:

void NVIC_Config()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	NVIC_Initial.NVIC_IRQChannel = EXTI0_IRQn;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <NVIC_Config+0x1c>)
 800069e:	2206      	movs	r2, #6
 80006a0:	701a      	strb	r2, [r3, #0]
	NVIC_Initial.NVIC_IRQChannelCmd = ENABLE;
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <NVIC_Config+0x1c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	70da      	strb	r2, [r3, #3]

	NVIC_Init(&NVIC_Initial);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <NVIC_Config+0x1c>)
 80006aa:	f7ff fd8d 	bl	80001c8 <NVIC_Init>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000020 	.word	0x20000020

080006b8 <externalIntConfig>:

void externalIntConfig()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 80006bc:	2101      	movs	r1, #1
 80006be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006c2:	f7ff ff55 	bl	8000570 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
 80006c6:	2100      	movs	r1, #0
 80006c8:	2000      	movs	r0, #0
 80006ca:	f7ff ff71 	bl	80005b0 <SYSCFG_EXTILineConfig>

	extiInit.EXTI_Line = EXTI_Line0;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <externalIntConfig+0x38>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	601a      	str	r2, [r3, #0]
	extiInit.EXTI_Mode = EXTI_Mode_Interrupt;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <externalIntConfig+0x38>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	711a      	strb	r2, [r3, #4]
	extiInit.EXTI_Trigger = EXTI_Trigger_Rising;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <externalIntConfig+0x38>)
 80006dc:	2208      	movs	r2, #8
 80006de:	715a      	strb	r2, [r3, #5]
	extiInit.EXTI_LineCmd = ENABLE;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <externalIntConfig+0x38>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	719a      	strb	r2, [r3, #6]

	EXTI_Init(&extiInit);
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <externalIntConfig+0x38>)
 80006e8:	f7ff fdd0 	bl	800028c <EXTI_Init>


}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000024 	.word	0x20000024

080006f4 <gpio_Init>:


void gpio_Init(GPIO_TypeDef* gpiox)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 80006fc:	2101      	movs	r1, #1
 80006fe:	2001      	movs	r0, #1
 8000700:	f7ff ff16 	bl	8000530 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000704:	2101      	movs	r1, #1
 8000706:	2008      	movs	r0, #8
 8000708:	f7ff ff12 	bl	8000530 <RCC_AHB1PeriphClockCmd>


	gpioInitStuct.GPIO_Mode=GPIO_Mode_IN;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <gpio_Init+0x68>)
 800070e:	2200      	movs	r2, #0
 8000710:	711a      	strb	r2, [r3, #4]
	gpioInitStuct.GPIO_Pin = GPIO_Pin_0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <gpio_Init+0x68>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
	gpioInitStuct.GPIO_OType=GPIO_OType_PP;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <gpio_Init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	719a      	strb	r2, [r3, #6]
	gpioInitStuct.GPIO_PuPd = GPIO_PuPd_DOWN;
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <gpio_Init+0x68>)
 8000720:	2202      	movs	r2, #2
 8000722:	71da      	strb	r2, [r3, #7]

	GPIO_Init(gpiox,&gpioInitStuct);
 8000724:	490d      	ldr	r1, [pc, #52]	; (800075c <gpio_Init+0x68>)
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fe56 	bl	80003d8 <GPIO_Init>


	gpioInitStuct.GPIO_Mode = GPIO_Mode_OUT;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <gpio_Init+0x68>)
 800072e:	2201      	movs	r2, #1
 8000730:	711a      	strb	r2, [r3, #4]
	gpioInitStuct.GPIO_OType = GPIO_OType_PP;
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <gpio_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	719a      	strb	r2, [r3, #6]
	gpioInitStuct.GPIO_Pin = GPIO_Pin_13;
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <gpio_Init+0x68>)
 800073a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800073e:	601a      	str	r2, [r3, #0]
	gpioInitStuct.GPIO_Speed = GPIO_Speed_100MHz;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <gpio_Init+0x68>)
 8000742:	2203      	movs	r2, #3
 8000744:	715a      	strb	r2, [r3, #5]
	gpioInitStuct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <gpio_Init+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	71da      	strb	r2, [r3, #7]

	GPIO_Init(GPIOD,&gpioInitStuct);
 800074c:	4903      	ldr	r1, [pc, #12]	; (800075c <gpio_Init+0x68>)
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <gpio_Init+0x6c>)
 8000750:	f7ff fe42 	bl	80003d8 <GPIO_Init>


}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000002c 	.word	0x2000002c
 8000760:	40020c00 	.word	0x40020c00

08000764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800079c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800076a:	e003      	b.n	8000774 <LoopCopyDataInit>

0800076c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800076e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000772:	3104      	adds	r1, #4

08000774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800077a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800077c:	d3f6      	bcc.n	800076c <CopyDataInit>
  ldr  r2, =_sbss
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000780:	e002      	b.n	8000788 <LoopFillZerobss>

08000782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000784:	f842 3b04 	str.w	r3, [r2], #4

08000788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800078a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800078c:	d3f9      	bcc.n	8000782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800078e:	f000 f841 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000792:	f000 f8f1 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000796:	f7ff ff4d 	bl	8000634 <main>
  bx  lr    
 800079a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800079c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007a0:	080009e0 	.word	0x080009e0
  ldr  r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007a8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80007ac:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80007b0:	20000034 	.word	0x20000034

080007b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC_IRQHandler>

080007b6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <HardFault_Handler+0x4>

080007ca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <BusFault_Handler+0x4>

080007d6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007da:	e7fe      	b.n	80007da <UsageFault_Handler+0x4>

080007dc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <SystemInit+0x60>)
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <SystemInit+0x60>)
 800081c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000828:	4a13      	ldr	r2, [pc, #76]	; (8000878 <SystemInit+0x64>)
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <SystemInit+0x64>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <SystemInit+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <SystemInit+0x64>)
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <SystemInit+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000848:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <SystemInit+0x64>)
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <SystemInit+0x68>)
 800084e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <SystemInit+0x64>)
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SystemInit+0x64>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800085a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000862:	f000 f80d 	bl	8000880 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000866:	4b03      	ldr	r3, [pc, #12]	; (8000874 <SystemInit+0x60>)
 8000868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086c:	609a      	str	r2, [r3, #8]
#endif
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00
 8000878:	40023800 	.word	0x40023800
 800087c:	24003010 	.word	0x24003010

08000880 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <SetSysClock+0xe8>)
 8000890:	4b35      	ldr	r3, [pc, #212]	; (8000968 <SetSysClock+0xe8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000898:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <SetSysClock+0xe8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d103      	bne.n	80008b8 <SetSysClock+0x38>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008b6:	d1f0      	bne.n	800089a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008b8:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <SetSysClock+0xe8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80008c4:	2301      	movs	r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	e001      	b.n	80008ce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d142      	bne.n	800095a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008d4:	4a24      	ldr	r2, [pc, #144]	; (8000968 <SetSysClock+0xe8>)
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <SetSysClock+0xe8>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80008e0:	4a22      	ldr	r2, [pc, #136]	; (800096c <SetSysClock+0xec>)
 80008e2:	4b22      	ldr	r3, [pc, #136]	; (800096c <SetSysClock+0xec>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ea:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008ec:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <SetSysClock+0xe8>)
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <SetSysClock+0xe8>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008f4:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <SetSysClock+0xe8>)
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <SetSysClock+0xe8>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <SetSysClock+0xe8>)
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <SetSysClock+0xe8>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800090a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <SetSysClock+0xe8>)
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <SetSysClock+0xf0>)
 8000910:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <SetSysClock+0xe8>)
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <SetSysClock+0xe8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800091c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800091e:	bf00      	nop
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <SetSysClock+0xe8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f9      	beq.n	8000920 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <SetSysClock+0xf4>)
 800092e:	f240 7205 	movw	r2, #1797	; 0x705
 8000932:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <SetSysClock+0xe8>)
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <SetSysClock+0xe8>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f023 0303 	bic.w	r3, r3, #3
 800093e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <SetSysClock+0xe8>)
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <SetSysClock+0xe8>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800094c:	bf00      	nop
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <SetSysClock+0xe8>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f003 030c 	and.w	r3, r3, #12
 8000956:	2b08      	cmp	r3, #8
 8000958:	d1f9      	bne.n	800094e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000
 8000970:	07405419 	.word	0x07405419
 8000974:	40023c00 	.word	0x40023c00

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4e0d      	ldr	r6, [pc, #52]	; (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	; (80009b4 <__libc_init_array+0x3c>)
 800097e:	1ba4      	subs	r4, r4, r6
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2500      	movs	r5, #0
 8000984:	42a5      	cmp	r5, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4e0b      	ldr	r6, [pc, #44]	; (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	; (80009bc <__libc_init_array+0x44>)
 800098c:	f000 f818 	bl	80009c0 <_init>
 8000990:	1ba4      	subs	r4, r4, r6
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2500      	movs	r5, #0
 8000996:	42a5      	cmp	r5, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a0:	4798      	blx	r3
 80009a2:	3501      	adds	r5, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009aa:	4798      	blx	r3
 80009ac:	3501      	adds	r5, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080009d8 	.word	0x080009d8
 80009b4:	080009d8 	.word	0x080009d8
 80009b8:	080009d8 	.word	0x080009d8
 80009bc:	080009dc 	.word	0x080009dc

080009c0 <_init>:
 80009c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c2:	bf00      	nop
 80009c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009c6:	bc08      	pop	{r3}
 80009c8:	469e      	mov	lr, r3
 80009ca:	4770      	bx	lr

080009cc <_fini>:
 80009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ce:	bf00      	nop
 80009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d2:	bc08      	pop	{r3}
 80009d4:	469e      	mov	lr, r3
 80009d6:	4770      	bx	lr
